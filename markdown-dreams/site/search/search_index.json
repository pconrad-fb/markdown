{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to do things with Markdown Markdown is not just a markup language. It is an ecosystem of powerful tools that lets you do everything from quickly writing an HTML page, to managing a full doc set, to taking notes, to writing a novel\u2014to creating a slide presentation. Markdown makes it easy to create content quickly, because its simple syntax covers most of the bases without requiring you to take your fingers off the keys. With shared storage or source control, Markdown can be a powerful collaboration tool, suitable for both technical and non-technical contributors and available in editors to meet every preference. This guide presents some basic instructions to get set up with some useful Markdown tools, and some recipes for using them. Each recipe lists what you'll need. You might want to get a basic set of tools set up first. Read Getting started to learn more. If you want to know more about what tools are available first, you can browse these sections: Markdown editors Publishing tools Source control with Git . You might find it interesting to install more than one Markdown editor to see which features you like. About the recipes Each recipe explains the goals, \"ingredients,\" and procedures for an interesting way to use Markdown. Just as a lasagna recipe doesn't contain instructions for preheating (or installing) the oven, the recipes in this guide don't contain software installation instructions. Git commands are not repeated from recipe to recipe, but documented more centrally to keep the recipes short. Some recipes go together. You might use Centralized Git workflow to manage content you are editing in a Git wiki with the goal of publishing a website with Hugo . Or you might take content that you started by just taking notes and turn it into a slide presentation .","title":"How to do things with Markdown"},{"location":"#how-to-do-things-with-markdown","text":"Markdown is not just a markup language. It is an ecosystem of powerful tools that lets you do everything from quickly writing an HTML page, to managing a full doc set, to taking notes, to writing a novel\u2014to creating a slide presentation. Markdown makes it easy to create content quickly, because its simple syntax covers most of the bases without requiring you to take your fingers off the keys. With shared storage or source control, Markdown can be a powerful collaboration tool, suitable for both technical and non-technical contributors and available in editors to meet every preference. This guide presents some basic instructions to get set up with some useful Markdown tools, and some recipes for using them. Each recipe lists what you'll need. You might want to get a basic set of tools set up first. Read Getting started to learn more. If you want to know more about what tools are available first, you can browse these sections: Markdown editors Publishing tools Source control with Git . You might find it interesting to install more than one Markdown editor to see which features you like.","title":"How to do things with Markdown"},{"location":"#about-the-recipes","text":"Each recipe explains the goals, \"ingredients,\" and procedures for an interesting way to use Markdown. Just as a lasagna recipe doesn't contain instructions for preheating (or installing) the oven, the recipes in this guide don't contain software installation instructions. Git commands are not repeated from recipe to recipe, but documented more centrally to keep the recipes short. Some recipes go together. You might use Centralized Git workflow to manage content you are editing in a Git wiki with the goal of publishing a website with Hugo . Or you might take content that you started by just taking notes and turn it into a slide presentation .","title":"About the recipes"},{"location":"getting-started/","text":"Getting started You can start working with Markdown just by opening your favorite text editor and starting to type, but you probably want to do more than that. You might want to share information on a website or wiki, take notes, or publish an eBook. You'll find it easiest to follow the recipes in this guide if you are comfortable with the following topics: Markdown Syntax Although some tools provide a WYSIWYG experience, knowing how to write Markdown directly will help you work more quickly and easily with a wider variety of tools. The command line Most of the recipes in this guide involve at least some typing on the command line, if only to install tools. Working with a package manager Installing the tools requires using one of the following common package managers: Windows: Chocolatey macOS: Homebrew Linux: apt-get or yum Git Some of the recipes in this guide use Git . Next steps Install a Markdown editor Consider your Storage and source control needs Think about Publishing possibilities Or just jump into the Recipes !","title":"Getting started"},{"location":"getting-started/#getting-started","text":"You can start working with Markdown just by opening your favorite text editor and starting to type, but you probably want to do more than that. You might want to share information on a website or wiki, take notes, or publish an eBook. You'll find it easiest to follow the recipes in this guide if you are comfortable with the following topics: Markdown Syntax Although some tools provide a WYSIWYG experience, knowing how to write Markdown directly will help you work more quickly and easily with a wider variety of tools. The command line Most of the recipes in this guide involve at least some typing on the command line, if only to install tools. Working with a package manager Installing the tools requires using one of the following common package managers: Windows: Chocolatey macOS: Homebrew Linux: apt-get or yum Git Some of the recipes in this guide use Git .","title":"Getting started"},{"location":"getting-started/#next-steps","text":"Install a Markdown editor Consider your Storage and source control needs Think about Publishing possibilities Or just jump into the Recipes !","title":"Next steps"},{"location":"getting-started/getting-started/","text":"Getting started You can start working with Markdown just by opening your favorite text editor and starting to type, but you probably want to do more than that. You might want to share information on a website or wiki, take notes, or publish an eBook. Ingredients These are the tools and resources you will use for the recipes in this guide. Each recipe lists the tools you'll need. Markdown editor A Markdown editor is a specialized text editor that works with Markdown. Different editors have different features\u2014you'll want to play with more than one to find out which ones you like. Pandoc Pandoc lets your Markdown editor import and export in several formats and also has a few tricks of its own. I recommend Pandoc for anyone who works with Markdown. Shared storage If you are collaborating with others, you might need a shared place to store Markdown files. You might also want web hosting or a blogging platform where you can publish your content when it's complete. Git Source control can be very important for collaborating without catastrophe. You'll need an account with a Git host, a Git client, and Git installed on your computer. Publishing tools Documentation management tools, static site generators, and even Pandoc can be useful to convert your content to a final format for general consumption. You can install everything up front, or just install what you need as you go along. If you're not sure, start with the following steps: Install Pandoc . Choose and install a Markdown editor . Set up Git . Hint Some editors detect pandoc, so installing it first is a good idea. Once you've got these tools installed, you can start trying the recipes. Things to know You'll find it easiest to follow the recipes in this guide if you are comfortable with the following topics: Markdown Syntax Although some editors provide a WYSIWYG experience, knowing how to write Markdown directly will help you work more quickly and easily with a wider variety of tools. See the Markdown cheatsheet Markdown comes in a bunch of flavors with different capabilities: CommonMark GitHub Flavored Markdown (GFM) Markdown Extra MultiMarkdown (MMD) Here are a few differences between these common flavors: CommonMark GFM Markdown Extra MMD Fenced Code Blocks \u2714 \u2714 \u2714 \u2714 Syntax Highlighting \u2714 \u2714 \u2714 Tables \u2714 \u2714 \u2714 Footnotes \u2714 \u2714 Auto-linking \u2714 Strikethrough \u2714 Definition Lists \u2714 \u2714 Abbreviations \u2714 \u2714 Some tools include extensions that provide additional capabilities. Hugo , for example, has an extensible framework of shortcodes that let you do things like admonitions or create your own features. Many tools, including MkDocs , use the Python-Markdown Extensions , which offer even more capabilities out of the box. There are also more complex systems that work with Markdown, such as Markdown+Math , which displays LaTeX math, and Mermaid , which generates diagrams. The command line Some of the recipes in this guide involve at least some typing on the command line. You'll definitely need to use the command line a little bit when you're working with Hugo , MkDocs , or Pandoc . Working with a package manager Installing some tools requires using one of the following common package managers: Linux: apt-get or yum macOS: Homebrew Windows: Chocolatey A package manager can make it easy to install several packages at once. For example: sudo apt-get install python3 ghostwriter pandoc mkdocs hugo gftp Git Some of the recipes in this guide use Git . Git is very powerful, but doesn't have to be hard to use. The recipes in this guide emphasize simplicity. If you already know Git, you can choose to do things differently. If you don't know git, take a look at Git basics . Other documentation tools The point of Markdown is to produce content that can be published and consumed in another format\u2014originally HTML, and now Word, slides, PDFs, and other formats. You should know something about tools like Acrobat, Google Drive, Microsoft Office, and other places where your Markdown might end up.","title":"Getting started"},{"location":"getting-started/getting-started/#getting-started","text":"You can start working with Markdown just by opening your favorite text editor and starting to type, but you probably want to do more than that. You might want to share information on a website or wiki, take notes, or publish an eBook.","title":"Getting started"},{"location":"getting-started/getting-started/#ingredients","text":"These are the tools and resources you will use for the recipes in this guide. Each recipe lists the tools you'll need. Markdown editor A Markdown editor is a specialized text editor that works with Markdown. Different editors have different features\u2014you'll want to play with more than one to find out which ones you like. Pandoc Pandoc lets your Markdown editor import and export in several formats and also has a few tricks of its own. I recommend Pandoc for anyone who works with Markdown. Shared storage If you are collaborating with others, you might need a shared place to store Markdown files. You might also want web hosting or a blogging platform where you can publish your content when it's complete. Git Source control can be very important for collaborating without catastrophe. You'll need an account with a Git host, a Git client, and Git installed on your computer. Publishing tools Documentation management tools, static site generators, and even Pandoc can be useful to convert your content to a final format for general consumption. You can install everything up front, or just install what you need as you go along. If you're not sure, start with the following steps: Install Pandoc . Choose and install a Markdown editor . Set up Git . Hint Some editors detect pandoc, so installing it first is a good idea. Once you've got these tools installed, you can start trying the recipes.","title":"Ingredients"},{"location":"getting-started/getting-started/#things-to-know","text":"You'll find it easiest to follow the recipes in this guide if you are comfortable with the following topics: Markdown Syntax Although some editors provide a WYSIWYG experience, knowing how to write Markdown directly will help you work more quickly and easily with a wider variety of tools. See the Markdown cheatsheet Markdown comes in a bunch of flavors with different capabilities: CommonMark GitHub Flavored Markdown (GFM) Markdown Extra MultiMarkdown (MMD) Here are a few differences between these common flavors: CommonMark GFM Markdown Extra MMD Fenced Code Blocks \u2714 \u2714 \u2714 \u2714 Syntax Highlighting \u2714 \u2714 \u2714 Tables \u2714 \u2714 \u2714 Footnotes \u2714 \u2714 Auto-linking \u2714 Strikethrough \u2714 Definition Lists \u2714 \u2714 Abbreviations \u2714 \u2714 Some tools include extensions that provide additional capabilities. Hugo , for example, has an extensible framework of shortcodes that let you do things like admonitions or create your own features. Many tools, including MkDocs , use the Python-Markdown Extensions , which offer even more capabilities out of the box. There are also more complex systems that work with Markdown, such as Markdown+Math , which displays LaTeX math, and Mermaid , which generates diagrams. The command line Some of the recipes in this guide involve at least some typing on the command line. You'll definitely need to use the command line a little bit when you're working with Hugo , MkDocs , or Pandoc . Working with a package manager Installing some tools requires using one of the following common package managers: Linux: apt-get or yum macOS: Homebrew Windows: Chocolatey A package manager can make it easy to install several packages at once. For example: sudo apt-get install python3 ghostwriter pandoc mkdocs hugo gftp Git Some of the recipes in this guide use Git . Git is very powerful, but doesn't have to be hard to use. The recipes in this guide emphasize simplicity. If you already know Git, you can choose to do things differently. If you don't know git, take a look at Git basics . Other documentation tools The point of Markdown is to produce content that can be published and consumed in another format\u2014originally HTML, and now Word, slides, PDFs, and other formats. You should know something about tools like Acrobat, Google Drive, Microsoft Office, and other places where your Markdown might end up.","title":"Things to know"},{"location":"recipes/","text":"Overview Easy ones Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Overview"},{"location":"recipes/#overview","text":"","title":"Overview"},{"location":"recipes/#easy-ones","text":"","title":"Easy ones"},{"location":"recipes/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-centralized-workflow/","text":"Collaborate using centralized Git workflow You can use Git to help a team collaborate on informal or internal documents in a very simple way. If you use a graphical Git client and a WYSIWYG Markdown editor, the workflow is easy enough for people who don't want complicated technical procedures to get in the way of their work. At the same time, Markdown in Git is easy for engineers to work with in their own tools. This is great for an informal thing of collaborating on a website, doc set, or make an eBook, PDF, Word doc (made up of several files) - can even do Pandoc slides if you break it up and then use Pandoc to concatenate Although a git repository comes with a separate wiki repository, you might sometimes want to collaborate on content without the constraints of storing it in a wiki. In other words, Running a Git wiki is a easy way to create, edit, and view a lot of content\u2014but using other tools to work with content on your own computer, using a Git repository only for source control, is a much more robust way to collaborate. For non-production content such as specifications, planning documents, newsletters, internal documentation, and the like, you can use a simple single-branch strategy called the centralized Git workflow. If you're publishing a complex website or documentation set with a team of collaborators, you should consider using Manage docs with Gitflow instead. Ingredients Markdown editor Git Publishing tools (optional) Hint Plan ahead based on the publishing tool you want to use. If you're planning to use a wiki, MkDocs, or Hugo, organize your docs in Git wiki structure from the start. If you're creating documents with Pandoc, think about whether you need to work on content in pieces and then use Pandoc to assemble everything. Working with content This recipe uses the centralized Git workflow. Pick an editor , then make sure you have Git set up and try each step below. The steps work together like a heartbeat that keeps content safe and synchronized for all collaborators. 1. Pull Fetch the latest changes from the remote repository to the local repository on your computer 2. Work Edit your content in your favorite Markdown editor 3. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git 4. Push When your work is final, push it up to the remote repository If you need to Publish content , you can use one of these recipes: Publish documentation with MkDocs Publish a website with Hugo Create a document with Pandoc Hint Remember not to publish content into a Git repository. The repo is only for storing your Markdown and other source files. Next steps Check out the following recipes : Manage docs with Gitflow Create an eBook Write a Word doc Publish a PDF Present slides","title":"Collaborate using Git centralized workflow"},{"location":"recipes/recipes-centralized-workflow/#collaborate-using-centralized-git-workflow","text":"You can use Git to help a team collaborate on informal or internal documents in a very simple way. If you use a graphical Git client and a WYSIWYG Markdown editor, the workflow is easy enough for people who don't want complicated technical procedures to get in the way of their work. At the same time, Markdown in Git is easy for engineers to work with in their own tools. This is great for an informal thing of collaborating on a website, doc set, or make an eBook, PDF, Word doc (made up of several files) - can even do Pandoc slides if you break it up and then use Pandoc to concatenate Although a git repository comes with a separate wiki repository, you might sometimes want to collaborate on content without the constraints of storing it in a wiki. In other words, Running a Git wiki is a easy way to create, edit, and view a lot of content\u2014but using other tools to work with content on your own computer, using a Git repository only for source control, is a much more robust way to collaborate. For non-production content such as specifications, planning documents, newsletters, internal documentation, and the like, you can use a simple single-branch strategy called the centralized Git workflow. If you're publishing a complex website or documentation set with a team of collaborators, you should consider using Manage docs with Gitflow instead.","title":"Collaborate using centralized Git workflow"},{"location":"recipes/recipes-centralized-workflow/#ingredients","text":"Markdown editor Git Publishing tools (optional) Hint Plan ahead based on the publishing tool you want to use. If you're planning to use a wiki, MkDocs, or Hugo, organize your docs in Git wiki structure from the start. If you're creating documents with Pandoc, think about whether you need to work on content in pieces and then use Pandoc to assemble everything.","title":"Ingredients"},{"location":"recipes/recipes-centralized-workflow/#working-with-content","text":"This recipe uses the centralized Git workflow. Pick an editor , then make sure you have Git set up and try each step below. The steps work together like a heartbeat that keeps content safe and synchronized for all collaborators. 1. Pull Fetch the latest changes from the remote repository to the local repository on your computer 2. Work Edit your content in your favorite Markdown editor 3. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git 4. Push When your work is final, push it up to the remote repository If you need to Publish content , you can use one of these recipes: Publish documentation with MkDocs Publish a website with Hugo Create a document with Pandoc Hint Remember not to publish content into a Git repository. The repo is only for storing your Markdown and other source files.","title":"Working with content"},{"location":"recipes/recipes-centralized-workflow/#next-steps","text":"Check out the following recipes : Manage docs with Gitflow Create an eBook Write a Word doc Publish a PDF Present slides","title":"Next steps"},{"location":"recipes/recipes-git-wiki/","text":"Edit a Git wiki A Git repository comes with a wiki, which makes it possible to collaboratively read and edit documentation. You can create a wiki to document projects or code stored in the repository, or you can just use a repository for its wiki capability. Note A Git wiki is a second repository attached to your repository. You clone, pull, and push t the repository and the wiki separately. A Git wiki uses Git wiki structure and it's one way to develop content for publishing in MkDocs or Hugo Ingredients Markdown editor Git Set up a wiki on your hosted repository The easiest way to set up the wiki is by logging onto your Git host. Bitbucket and Sourcetree In a browser, log on to Bitbucket. Under \"Repository settings\" look for \"Features\" and click Wiki Select Public wiki and save. GitHub and GitHub Desktop The GitHub documentation on Wikis is helpful. Here are the basic steps: In a browser, log on to GitHub. Click the Settings button: Scroll down to \"Features\" and select Wikis : Edit content on the host If you just want to add a few pages to the wiki online, there's no more setup to do! Just go to your repository, click Wiki , and you'll see buttons for creating and editing pages. Hint To add a page in a new folder, make the folder part of the new filename. For example: morestuff/newpage.md adds newpage.md in a folder called morestuff . Clone the wiki to a local repository There are advantages to working with wiki files locally, on your computer: It's much easier to add folders and move files around You can work on it even when you're offline You can use whatever Markdown editor you want Others can collaborate with you To work on the wiki locally, clone the wiki to a local repository: Bitbucket and Sourcetree Go to your online repository and click Wiki . Click Clone wiki then Clone in Sourcetree . Make sure the local path shows the directory where you want to clone the repository, and click Clone . GitHub and GitHub Desktop Go to your online repository and click the Wiki button: Copy the Clone this wiki locally URL. In GitHub Desktop, click File > Clone repository . Paste the URL, make sure the local path shows the directory where you want to clone the repository, and click Clone . Linux command line Go to your online repository and click Wiki . Copy the URL (or command and URL) to clone the wiki repository. On the command line, navigate to the directory where you want to clone the repository. Use git clone and the URL to clone the repository. Example: git clone https://my_name@bitbucket.org/my_name/markdown-stuff.git/wiki Work with the content locally On your computer, go to the directory where you cloned the wiki. There should be a directory called wiki containing a file called Home.md \u2014the Markdown source for the welcome page the wiki displayed when you created it online. You can now work with the wiki using the Git centralized workflow or the GitHub flow , using the familiar cycle of pull, edit, commit, push. Tutorial Here's a quick tutorial that shows how to organize pages in the wiki. Try creating some content Try making the following changes: Add a folder called stuff . Using your favorite Markdown editor, make a file called something.md inside stuff , with the following contents: # Something Yes, there's *something* here! Now go [home](../Home). You should now have a directory structure that looks like this: Home.md stuff/ something.md Take a look After you commit and push the changes, take a look in your online wiki: Go to your online repository and click Wiki . View the page tree of the wiki. For example: In Bitbucket, click the name of the wiki. In GitHub, click Pages . Navigate to the page you created. Try the home link. Next steps Try the following recipe, which is very similar: Collaborate using the Git centralized workflow","title":"Edit a Git wiki"},{"location":"recipes/recipes-git-wiki/#edit-a-git-wiki","text":"A Git repository comes with a wiki, which makes it possible to collaboratively read and edit documentation. You can create a wiki to document projects or code stored in the repository, or you can just use a repository for its wiki capability. Note A Git wiki is a second repository attached to your repository. You clone, pull, and push t the repository and the wiki separately. A Git wiki uses Git wiki structure and it's one way to develop content for publishing in MkDocs or Hugo","title":"Edit a Git wiki"},{"location":"recipes/recipes-git-wiki/#ingredients","text":"Markdown editor Git","title":"Ingredients"},{"location":"recipes/recipes-git-wiki/#set-up-a-wiki-on-your-hosted-repository","text":"The easiest way to set up the wiki is by logging onto your Git host. Bitbucket and Sourcetree In a browser, log on to Bitbucket. Under \"Repository settings\" look for \"Features\" and click Wiki Select Public wiki and save. GitHub and GitHub Desktop The GitHub documentation on Wikis is helpful. Here are the basic steps: In a browser, log on to GitHub. Click the Settings button: Scroll down to \"Features\" and select Wikis :","title":"Set up a wiki on your hosted repository"},{"location":"recipes/recipes-git-wiki/#edit-content-on-the-host","text":"If you just want to add a few pages to the wiki online, there's no more setup to do! Just go to your repository, click Wiki , and you'll see buttons for creating and editing pages. Hint To add a page in a new folder, make the folder part of the new filename. For example: morestuff/newpage.md adds newpage.md in a folder called morestuff .","title":"Edit content on the host"},{"location":"recipes/recipes-git-wiki/#clone-the-wiki-to-a-local-repository","text":"There are advantages to working with wiki files locally, on your computer: It's much easier to add folders and move files around You can work on it even when you're offline You can use whatever Markdown editor you want Others can collaborate with you To work on the wiki locally, clone the wiki to a local repository: Bitbucket and Sourcetree Go to your online repository and click Wiki . Click Clone wiki then Clone in Sourcetree . Make sure the local path shows the directory where you want to clone the repository, and click Clone . GitHub and GitHub Desktop Go to your online repository and click the Wiki button: Copy the Clone this wiki locally URL. In GitHub Desktop, click File > Clone repository . Paste the URL, make sure the local path shows the directory where you want to clone the repository, and click Clone . Linux command line Go to your online repository and click Wiki . Copy the URL (or command and URL) to clone the wiki repository. On the command line, navigate to the directory where you want to clone the repository. Use git clone and the URL to clone the repository. Example: git clone https://my_name@bitbucket.org/my_name/markdown-stuff.git/wiki","title":"Clone the wiki to a local repository"},{"location":"recipes/recipes-git-wiki/#work-with-the-content-locally","text":"On your computer, go to the directory where you cloned the wiki. There should be a directory called wiki containing a file called Home.md \u2014the Markdown source for the welcome page the wiki displayed when you created it online. You can now work with the wiki using the Git centralized workflow or the GitHub flow , using the familiar cycle of pull, edit, commit, push.","title":"Work with the content locally"},{"location":"recipes/recipes-git-wiki/#tutorial","text":"Here's a quick tutorial that shows how to organize pages in the wiki.","title":"Tutorial"},{"location":"recipes/recipes-git-wiki/#try-creating-some-content","text":"Try making the following changes: Add a folder called stuff . Using your favorite Markdown editor, make a file called something.md inside stuff , with the following contents: # Something Yes, there's *something* here! Now go [home](../Home). You should now have a directory structure that looks like this: Home.md stuff/ something.md","title":"Try creating some content"},{"location":"recipes/recipes-git-wiki/#take-a-look","text":"After you commit and push the changes, take a look in your online wiki: Go to your online repository and click Wiki . View the page tree of the wiki. For example: In Bitbucket, click the name of the wiki. In GitHub, click Pages . Navigate to the page you created. Try the home link.","title":"Take a look"},{"location":"recipes/recipes-git-wiki/#next-steps","text":"Try the following recipe, which is very similar: Collaborate using the Git centralized workflow","title":"Next steps"},{"location":"recipes/recipes-gitflow/","text":"Manage docs with GitHub Flow Once your team or project reaches a certain size, branching is a good way to keep people from accidentally interfering with each other's work. It's also a great way to stage and test code or content before migrating to production. There are many branching strategies, some of them quite complicated. The one I like, and that I have used for documentation in the past, is called GitHub Flow . It's simple but effective. Here's how it changes the single-branch Pull-Work-Commit-Push steps used in the Centralized Git Workflow . What you need Markdown editor Git Publishing tools Hint Plan ahead based on the publishing tool you want to use. If you're planning to use a wiki, MkDocs, or Hugo, organize your docs in Git wiki structure from the start. If you're creating documents with Pandoc, think about whether you need to work on content in pieces and then use Pandoc to assemble everything. Working with content Pick an editor , then make sure you have Git set up and try each step below. The steps work together like a heartbeat that keeps content safe and synchronized for all collaborators. 1. Pull Make sure you're on the master branch and sync the latest changes from the remote repository. 2. Create a branch Create (\"check out\") a branch for working on the current part of the content. 3. Work Edit your content in your favorite Markdown editor. 4. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git. 5. Push From time to time, sync your branch up to the remote repository. 6. Create a pull request When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request. 7. Merge When your work is approved, merge your branch into master on the remote repository Hint After you're done with that part of the project, you can delete your working branch or keep it around for further work. Before starting work on a different part of the project, remember to switch to master and pull again. If you need to Publish content , you can use one of these recipes: Publish documentation with MkDocs Publish a website with Hugo Create a document with Pandoc Hint Remember not to publish content into a Git repository. The repo is only for storing your Markdown and other source files. Next steps Check out the following recipes : Manage docs with Gitflow Create an eBook Write a Word doc Publish a PDF Present slides","title":"Manage docs with GitHub Flow"},{"location":"recipes/recipes-gitflow/#manage-docs-with-github-flow","text":"Once your team or project reaches a certain size, branching is a good way to keep people from accidentally interfering with each other's work. It's also a great way to stage and test code or content before migrating to production. There are many branching strategies, some of them quite complicated. The one I like, and that I have used for documentation in the past, is called GitHub Flow . It's simple but effective. Here's how it changes the single-branch Pull-Work-Commit-Push steps used in the Centralized Git Workflow .","title":"Manage docs with GitHub Flow"},{"location":"recipes/recipes-gitflow/#what-you-need","text":"Markdown editor Git Publishing tools Hint Plan ahead based on the publishing tool you want to use. If you're planning to use a wiki, MkDocs, or Hugo, organize your docs in Git wiki structure from the start. If you're creating documents with Pandoc, think about whether you need to work on content in pieces and then use Pandoc to assemble everything.","title":"What you need"},{"location":"recipes/recipes-gitflow/#working-with-content","text":"Pick an editor , then make sure you have Git set up and try each step below. The steps work together like a heartbeat that keeps content safe and synchronized for all collaborators. 1. Pull Make sure you're on the master branch and sync the latest changes from the remote repository. 2. Create a branch Create (\"check out\") a branch for working on the current part of the content. 3. Work Edit your content in your favorite Markdown editor. 4. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git. 5. Push From time to time, sync your branch up to the remote repository. 6. Create a pull request When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request. 7. Merge When your work is approved, merge your branch into master on the remote repository Hint After you're done with that part of the project, you can delete your working branch or keep it around for further work. Before starting work on a different part of the project, remember to switch to master and pull again. If you need to Publish content , you can use one of these recipes: Publish documentation with MkDocs Publish a website with Hugo Create a document with Pandoc Hint Remember not to publish content into a Git repository. The repo is only for storing your Markdown and other source files.","title":"Working with content"},{"location":"recipes/recipes-gitflow/#next-steps","text":"Check out the following recipes : Manage docs with Gitflow Create an eBook Write a Word doc Publish a PDF Present slides","title":"Next steps"},{"location":"recipes/recipes-hugo/","text":"Publish a website with Hugo Different choices: Pandoc Others from my preso Ingredients Markdown editor Hugo Git (optional) Hint Hugo works best with Markdown files that are organized in Git wiki structure . You can even use Git wiki to develop the content. This recipe goes well with: Working by yourself on your local hard drive Centralized Git workflow GitHub flow Make sure yoiu have the ingredients for those as well Installing and creating the directory are easy: sudo apt-get install hugo But this got me 0.40 which wasn't compatible with the templates; I had to manually install 0.59 using dpkg -i from a downloaded archive hugo new-site markdown creates a directory called markdown with the basics in it Pick a theme, git-clone it into its own named dir in the themes dir Add theme = <theme> to config.toml Start it with hugo server -D (drafts enabled) Works, publishes, able to publish to just the markdown directory by setting base URL Image path static/images ... Markdown editor and Hugo see this path differently; Hugo ignores static so you can't see images in both the Markdown editor and Hugo. Then you have to FTP things up manually Setting up your site Configuration and preferences Working with content Extra markdown stuff like short codes or extensions Publishing generating the site FTP it somewhere?","title":"Publish a website with Hugo"},{"location":"recipes/recipes-hugo/#publish-a-website-with-hugo","text":"Different choices: Pandoc Others from my preso","title":"Publish a website with Hugo"},{"location":"recipes/recipes-hugo/#ingredients","text":"Markdown editor Hugo Git (optional) Hint Hugo works best with Markdown files that are organized in Git wiki structure . You can even use Git wiki to develop the content. This recipe goes well with: Working by yourself on your local hard drive Centralized Git workflow GitHub flow Make sure yoiu have the ingredients for those as well Installing and creating the directory are easy: sudo apt-get install hugo But this got me 0.40 which wasn't compatible with the templates; I had to manually install 0.59 using dpkg -i from a downloaded archive hugo new-site markdown creates a directory called markdown with the basics in it Pick a theme, git-clone it into its own named dir in the themes dir Add theme = <theme> to config.toml Start it with hugo server -D (drafts enabled) Works, publishes, able to publish to just the markdown directory by setting base URL Image path static/images ... Markdown editor and Hugo see this path differently; Hugo ignores static so you can't see images in both the Markdown editor and Hugo. Then you have to FTP things up manually","title":"Ingredients"},{"location":"recipes/recipes-hugo/#setting-up-your-site","text":"Configuration and preferences","title":"Setting up your site"},{"location":"recipes/recipes-hugo/#working-with-content","text":"Extra markdown stuff like short codes or extensions","title":"Working with content"},{"location":"recipes/recipes-hugo/#publishing","text":"generating the site FTP it somewhere?","title":"Publishing"},{"location":"recipes/recipes-mkdocs/","text":"Publish documentation with MkDocs MkDocs is a static site generator designed for documentation. It's fairly easy to use, though it does require some work on the command line. Like some other tools, it uses the Git wiki structure \u2014which means you can even use Git wiki to develop the content. To install MkDocs, use your operating system's package manager: Linux: apt-get or yum macOS: Homebrew Windows: Chocolatey Because MkDocs is based on Python, you can also install manually install it using the pip tool. Ingredients Markdown editor MkDocs Git (optional) This recipe goes well with: Working by yourself on your local hard drive Centralized Git workflow GitHub flow Creating a project You can create a new doc set just by typing mkdocs new my-project and starting to add content. Of course, if you plan to use one of the Git workflows, you should run this command inside your local Git repository. The mkdocs new command sets up a directory that contains two things: A directory called docs containing index.md A file called mkdocs.yml that you use for configuring your project. As you might have guessed, index.md is a congratulatory default first page, and you can change it, add directories and files, and start building the site in the docs directory. Live preview The command mkdocs serve starts a webserver that lets you preview your content as you create it. Whenever you save a Markdown file, MkDocs does its best to update the preview\u2014sometimes if you change the site navigation, it can't keep up. When that happens, just use Control-C to stop the server and then type the command again to start it. When the webserver starts, it provides information about any broken links in your content, any files that are unused, and where to point your browser to see the content. Here's an abbreviated version of some output I got while working on this website: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - getting-started/index.md - recipes/index.md WARNING - Documentation file 'recipes/recipes-centralized-workflow.md' contains a link to 'recipes-slides.md' which is not found in the documentation files. INFO - Documentation built in 1.82 seconds [I 200728 20:45:18 server:296] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000 [I 200728 20:45:18 handlers:62] Start watching changes INFO - Start watching changes [I 200728 20:45:18 handlers:135] Browser Connected: http://127.0.0.1:8000/recipes/recipes-centralized-workflow/ INFO - Browser Connected: http://127.0.0.1:8000/recipes/recipes-centralized-workflow/ Adding a theme The default look is fine, but you'll probably want to choose a theme . Themes don't just change the look of the site\u2014they sometimes add extensions and capabilities (such as the Python Markdown Extensions ). You can add a theme, activate extensions, and set up site navigation in the site configuration file mkdocs.yml . Hint You don't have to set up navigation manually. If you don't, MkDocs provides fairly sensible navigation automatically. But the option is there if you need that level of control. Here's an abbreviated version of my mkdocs.yml file: site_name: Markdown Dreams theme: name: material markdown_extensions: - admonition - pymdownx.highlight: use_pygments: true - pymdownx.snippets base_path: 'snippets/' nav: - 'How to do things with Markdown': 'index.md' - 'Getting started': 'getting-started/index.md' - 'Tools': - 'Markdown editors': 'tools/tools-editors.md' - 'Source control': 'tools/tools-git.md' - 'Publishing': 'tools/tools-publishing.md' - 'Recipes': - 'Overview': 'recipes/index.md' - 'Run a Git wiki': 'recipes/recipes-git-wiki.md' - 'Resources': 'resources/index.md' To save length, I stripped out a lot of the navigation, but you get the idea. Working with content For the most part, working with content is what you would expect. It's just Markdown in Git wiki structure, using the workflow of your choice. Here are a few tips: Links take some getting used to. Each link is relative based on the location of the page in which the link appears. Remember, each file is treated as a folder in the browser. To link to the \"Source control\" page from \"Run a Git wiki\" in the above navigational structure, you would add the following link: [Source control](../../tools/tools-git.md) If you have trouble with a link, look at the output when you run mkdocs serve . Because all HTML is valid Markdown, you can use HTML. However, you can't use Markdown inside a block of HTML. If you choose a theme that includes features like snippets and admonitions, then you can do things outside the bounds of normal Markdown. This is very useful, but makes it likely that you can't use your Markdown source files with other toolchains (unless you take the fun stuff out). Also, you have to rrestart the server when you add or change a snippet, and also if you start using stnippets, you're fgettting away from a situation where you can publish in other formats. Snippets If you use snippets, the location of the files you include is relative to the top-level directory of your project ( my-project for example). It's a good idea to create a directory for snippets and then define it in the base_path variable in your mkdocs.yml file. I created a directory called snippets and specified it as shown above. That way, I can include snippets using only the filename and I don't have to think about a relative path from the page where I am using the snipppet: <table> <tr> <td><b>1. <a href=\"#pull\">Pull</a></b></td> <td>Make sure you're on the master branch and sync the latest changes from the remote repository.</td> </tr> <tr> <td><b>2. <a href=\"#create-a-branch\">Create a branch</a></b></td> <td>Create (\"check out\") a branch for working on the current part of the content.</td> </tr> <tr> <td>3. <b>Work</b></td> <td>Edit your content in your favorite Markdown editor.</td> </tr> <tr> <td>4. <b><a href=\"#stage-and-commit\">Stage and commit</a></b></td> <td>From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git.</td> </tr> <tr> <td><b>5. <a href=\"#push\">Push</a></b></td> <td>From time to time, sync your branch up to the remote repository.</td> </tr> <tr> <td><b>6. <a href=\"#create-a-pull-request\">Create a pull request</a></b></td> <td>When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request.</td> </tr> <tr> <td><b>7. <a href=\"#approve-and-merge\">Merge</a></b></td> <td>When your work is approved, merge your branch into master on the remote repository</td> </tr> </table> Building and publishing generating the site FTP it somewhere?","title":"Publish documentation with MkDocs"},{"location":"recipes/recipes-mkdocs/#publish-documentation-with-mkdocs","text":"MkDocs is a static site generator designed for documentation. It's fairly easy to use, though it does require some work on the command line. Like some other tools, it uses the Git wiki structure \u2014which means you can even use Git wiki to develop the content. To install MkDocs, use your operating system's package manager: Linux: apt-get or yum macOS: Homebrew Windows: Chocolatey Because MkDocs is based on Python, you can also install manually install it using the pip tool.","title":"Publish documentation with MkDocs"},{"location":"recipes/recipes-mkdocs/#ingredients","text":"Markdown editor MkDocs Git (optional) This recipe goes well with: Working by yourself on your local hard drive Centralized Git workflow GitHub flow","title":"Ingredients"},{"location":"recipes/recipes-mkdocs/#creating-a-project","text":"You can create a new doc set just by typing mkdocs new my-project and starting to add content. Of course, if you plan to use one of the Git workflows, you should run this command inside your local Git repository. The mkdocs new command sets up a directory that contains two things: A directory called docs containing index.md A file called mkdocs.yml that you use for configuring your project. As you might have guessed, index.md is a congratulatory default first page, and you can change it, add directories and files, and start building the site in the docs directory.","title":"Creating a project"},{"location":"recipes/recipes-mkdocs/#live-preview","text":"The command mkdocs serve starts a webserver that lets you preview your content as you create it. Whenever you save a Markdown file, MkDocs does its best to update the preview\u2014sometimes if you change the site navigation, it can't keep up. When that happens, just use Control-C to stop the server and then type the command again to start it. When the webserver starts, it provides information about any broken links in your content, any files that are unused, and where to point your browser to see the content. Here's an abbreviated version of some output I got while working on this website: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - getting-started/index.md - recipes/index.md WARNING - Documentation file 'recipes/recipes-centralized-workflow.md' contains a link to 'recipes-slides.md' which is not found in the documentation files. INFO - Documentation built in 1.82 seconds [I 200728 20:45:18 server:296] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000 [I 200728 20:45:18 handlers:62] Start watching changes INFO - Start watching changes [I 200728 20:45:18 handlers:135] Browser Connected: http://127.0.0.1:8000/recipes/recipes-centralized-workflow/ INFO - Browser Connected: http://127.0.0.1:8000/recipes/recipes-centralized-workflow/","title":"Live preview"},{"location":"recipes/recipes-mkdocs/#adding-a-theme","text":"The default look is fine, but you'll probably want to choose a theme . Themes don't just change the look of the site\u2014they sometimes add extensions and capabilities (such as the Python Markdown Extensions ). You can add a theme, activate extensions, and set up site navigation in the site configuration file mkdocs.yml . Hint You don't have to set up navigation manually. If you don't, MkDocs provides fairly sensible navigation automatically. But the option is there if you need that level of control. Here's an abbreviated version of my mkdocs.yml file: site_name: Markdown Dreams theme: name: material markdown_extensions: - admonition - pymdownx.highlight: use_pygments: true - pymdownx.snippets base_path: 'snippets/' nav: - 'How to do things with Markdown': 'index.md' - 'Getting started': 'getting-started/index.md' - 'Tools': - 'Markdown editors': 'tools/tools-editors.md' - 'Source control': 'tools/tools-git.md' - 'Publishing': 'tools/tools-publishing.md' - 'Recipes': - 'Overview': 'recipes/index.md' - 'Run a Git wiki': 'recipes/recipes-git-wiki.md' - 'Resources': 'resources/index.md' To save length, I stripped out a lot of the navigation, but you get the idea.","title":"Adding a theme"},{"location":"recipes/recipes-mkdocs/#working-with-content","text":"For the most part, working with content is what you would expect. It's just Markdown in Git wiki structure, using the workflow of your choice. Here are a few tips: Links take some getting used to. Each link is relative based on the location of the page in which the link appears. Remember, each file is treated as a folder in the browser. To link to the \"Source control\" page from \"Run a Git wiki\" in the above navigational structure, you would add the following link: [Source control](../../tools/tools-git.md) If you have trouble with a link, look at the output when you run mkdocs serve . Because all HTML is valid Markdown, you can use HTML. However, you can't use Markdown inside a block of HTML. If you choose a theme that includes features like snippets and admonitions, then you can do things outside the bounds of normal Markdown. This is very useful, but makes it likely that you can't use your Markdown source files with other toolchains (unless you take the fun stuff out). Also, you have to rrestart the server when you add or change a snippet, and also if you start using stnippets, you're fgettting away from a situation where you can publish in other formats.","title":"Working with content"},{"location":"recipes/recipes-mkdocs/#snippets","text":"If you use snippets, the location of the files you include is relative to the top-level directory of your project ( my-project for example). It's a good idea to create a directory for snippets and then define it in the base_path variable in your mkdocs.yml file. I created a directory called snippets and specified it as shown above. That way, I can include snippets using only the filename and I don't have to think about a relative path from the page where I am using the snipppet: <table> <tr> <td><b>1. <a href=\"#pull\">Pull</a></b></td> <td>Make sure you're on the master branch and sync the latest changes from the remote repository.</td> </tr> <tr> <td><b>2. <a href=\"#create-a-branch\">Create a branch</a></b></td> <td>Create (\"check out\") a branch for working on the current part of the content.</td> </tr> <tr> <td>3. <b>Work</b></td> <td>Edit your content in your favorite Markdown editor.</td> </tr> <tr> <td>4. <b><a href=\"#stage-and-commit\">Stage and commit</a></b></td> <td>From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git.</td> </tr> <tr> <td><b>5. <a href=\"#push\">Push</a></b></td> <td>From time to time, sync your branch up to the remote repository.</td> </tr> <tr> <td><b>6. <a href=\"#create-a-pull-request\">Create a pull request</a></b></td> <td>When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request.</td> </tr> <tr> <td><b>7. <a href=\"#approve-and-merge\">Merge</a></b></td> <td>When your work is approved, merge your branch into master on the remote repository</td> </tr> </table>","title":"Snippets"},{"location":"recipes/recipes-mkdocs/#building-and-publishing","text":"generating the site FTP it somewhere?","title":"Building and publishing"},{"location":"recipes/recipes-notes/","text":"Take notes Markdown is a great tool for taking notes quickly, because you can accomplish all the basic formatting without taking your hands off the keyboard. You can use any Markdown editor to work with files on your computer, but you can also share notes across your devices using a cloud storage service such as Dropbox plus a note-taking app like Joplin or a Markdown editor like Typora. Ingredients Markdown editor Cloud storage Either Joplin or another editor Either local disk or synced folder/backend Talk about how to set up Joplin with backend, how it works with external editing, how to do encryption. Alternative: just point Typora at a Dropbox or other synced folder. You can collaborate with people this way! Joplin Joplin is designed specifically for taking notes, and shares some features with applications like Evernote. You can store your notes as local files on your computer, or sync them to the cloud with a service like Dropbox or OneDrive. you can even encrypt your notes end-to-end for privacy. Setting up Joplin is fairly straightforward. In the Preferences screen, there is a place to choose your storage: local filesystem, DropBox, and so on. If you want to sync Joplin across devices you should configure all your Joplin instances to use the same cloud storage location. Getting your old notes from Evernote One of the great features of Joplin is that you can import notes from Evernote. The caveat is that the imported Markdown files will not have sensible filenames\u2014but this is still better than manually copying and pasting each note individually. To can export notebook by notebook from Evernote: Right click a notebook in the left nav and select Export notes Export the notebook as an ENEX file. In Joplin, go to File > Import and import the notebook as Markdown. You can then export the notebook as Markdown from Joplin into the folder where you have decided to store your notes. Typora An interesting alternative to Joplin is to use another editor such as Typora. Both Joplin and Typora provide a navigation tree to make it easy to organize and manage \"notes\" (which are just Markdown files). The advantage of Joplin is that it is a dedicated note-taking app. The advantage of Typora is that it is a Markdown editor, which means you get a lot more tools for integrating into a content management and publishing toolchain. If you plan to do more that note-taking, consider installing a Markdown editor such as Typora or Ghostwriter. Actually, there's nothing stopping you from using all three! Installing and using Typora is pretty straightforward. You can store files in multiple folders, which makes it easy to set up a note-taking folder, a drafts folder, a documents folder, and so on. Any of these folders could by synced by Dropbox or another service. Setting up Typora to take notes To fine-tune Typora as a note-taking application, you will want to set a few preferences. Go to File > Preferences . Click the General tab: For On Launch, select Restore last closed folders . When you set up a folder to contain your notes, Typora will open it for you automatically. Of course, you can also open other files and folders. Check the Auto Save checkbox and make sure Save without asking\u2026 is checked. You won\u2019t have to think about saving notes; they\u2019ll just always be saved. Click the Image tab. Select Copy image to ./${filename}.assets . Typora will make a folder for each document\u2019s images. This makes it easy to take the images along if you convert the document to a different format or send it to another location. Check all the boxes except for the auto escape one. This makes sure that local files and online images also get added to the .assets folder. By the way, Typora saves copies of pasted images, too! Click the Markdown tab. Check the Highlight box so that you can highlight things in your notes. There are other interesting syntax features to explore, including diagrams.","title":"Take notes"},{"location":"recipes/recipes-notes/#take-notes","text":"Markdown is a great tool for taking notes quickly, because you can accomplish all the basic formatting without taking your hands off the keyboard. You can use any Markdown editor to work with files on your computer, but you can also share notes across your devices using a cloud storage service such as Dropbox plus a note-taking app like Joplin or a Markdown editor like Typora.","title":"Take notes"},{"location":"recipes/recipes-notes/#ingredients","text":"Markdown editor Cloud storage Either Joplin or another editor Either local disk or synced folder/backend Talk about how to set up Joplin with backend, how it works with external editing, how to do encryption. Alternative: just point Typora at a Dropbox or other synced folder. You can collaborate with people this way!","title":"Ingredients"},{"location":"recipes/recipes-notes/#joplin","text":"Joplin is designed specifically for taking notes, and shares some features with applications like Evernote. You can store your notes as local files on your computer, or sync them to the cloud with a service like Dropbox or OneDrive. you can even encrypt your notes end-to-end for privacy. Setting up Joplin is fairly straightforward. In the Preferences screen, there is a place to choose your storage: local filesystem, DropBox, and so on. If you want to sync Joplin across devices you should configure all your Joplin instances to use the same cloud storage location.","title":"Joplin"},{"location":"recipes/recipes-notes/#getting-your-old-notes-from-evernote","text":"One of the great features of Joplin is that you can import notes from Evernote. The caveat is that the imported Markdown files will not have sensible filenames\u2014but this is still better than manually copying and pasting each note individually. To can export notebook by notebook from Evernote: Right click a notebook in the left nav and select Export notes Export the notebook as an ENEX file. In Joplin, go to File > Import and import the notebook as Markdown. You can then export the notebook as Markdown from Joplin into the folder where you have decided to store your notes.","title":"Getting your old notes from Evernote"},{"location":"recipes/recipes-notes/#typora","text":"An interesting alternative to Joplin is to use another editor such as Typora. Both Joplin and Typora provide a navigation tree to make it easy to organize and manage \"notes\" (which are just Markdown files). The advantage of Joplin is that it is a dedicated note-taking app. The advantage of Typora is that it is a Markdown editor, which means you get a lot more tools for integrating into a content management and publishing toolchain. If you plan to do more that note-taking, consider installing a Markdown editor such as Typora or Ghostwriter. Actually, there's nothing stopping you from using all three! Installing and using Typora is pretty straightforward. You can store files in multiple folders, which makes it easy to set up a note-taking folder, a drafts folder, a documents folder, and so on. Any of these folders could by synced by Dropbox or another service.","title":"Typora"},{"location":"recipes/recipes-notes/#setting-up-typora-to-take-notes","text":"To fine-tune Typora as a note-taking application, you will want to set a few preferences. Go to File > Preferences . Click the General tab: For On Launch, select Restore last closed folders . When you set up a folder to contain your notes, Typora will open it for you automatically. Of course, you can also open other files and folders. Check the Auto Save checkbox and make sure Save without asking\u2026 is checked. You won\u2019t have to think about saving notes; they\u2019ll just always be saved. Click the Image tab. Select Copy image to ./${filename}.assets . Typora will make a folder for each document\u2019s images. This makes it easy to take the images along if you convert the document to a different format or send it to another location. Check all the boxes except for the auto escape one. This makes sure that local files and online images also get added to the .assets folder. By the way, Typora saves copies of pasted images, too! Click the Markdown tab. Check the Highlight box so that you can highlight things in your notes. There are other interesting syntax features to explore, including diagrams.","title":"Setting up Typora to take notes"},{"location":"recipes/recipes-pandoc-ebook/","text":"Overview Ingredients Markdown editor Pandoc Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Create an eBook"},{"location":"recipes/recipes-pandoc-ebook/#overview","text":"","title":"Overview"},{"location":"recipes/recipes-pandoc-ebook/#ingredients","text":"Markdown editor Pandoc","title":"Ingredients"},{"location":"recipes/recipes-pandoc-ebook/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-pandoc-pdf/","text":"Overview Ingredients Markdown editor Pandoc Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Create a PDF"},{"location":"recipes/recipes-pandoc-pdf/#overview","text":"","title":"Overview"},{"location":"recipes/recipes-pandoc-pdf/#ingredients","text":"Markdown editor Pandoc","title":"Ingredients"},{"location":"recipes/recipes-pandoc-pdf/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-pandoc-web/","text":"Overview Ingredients Markdown editor Pandoc Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Grab a web page"},{"location":"recipes/recipes-pandoc-web/#overview","text":"","title":"Overview"},{"location":"recipes/recipes-pandoc-web/#ingredients","text":"Markdown editor Pandoc","title":"Ingredients"},{"location":"recipes/recipes-pandoc-web/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-pandoc-word/","text":"Overview Ingredients Markdown editor Pandoc Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Create a Word document"},{"location":"recipes/recipes-pandoc-word/#overview","text":"","title":"Overview"},{"location":"recipes/recipes-pandoc-word/#ingredients","text":"Markdown editor Pandoc","title":"Ingredients"},{"location":"recipes/recipes-pandoc-word/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-pandoc/","text":"Overview Ingredients Markdown editor Pandoc Overall, how it works, concatenation, div stuff, whatever we can use for all of them Image scaling, all that Then, Sections for Slides - you'll be making PPT so you need PPT or Drive. For standalone see that recipe Word PDF eBook What else? More Pandoc Tricks: Divs and Attributes Hard ones - Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Overview"},{"location":"recipes/recipes-pandoc/#overview","text":"","title":"Overview"},{"location":"recipes/recipes-pandoc/#ingredients","text":"Markdown editor Pandoc Overall, how it works, concatenation, div stuff, whatever we can use for all of them Image scaling, all that Then, Sections for Slides - you'll be making PPT so you need PPT or Drive. For standalone see that recipe Word PDF eBook What else? More Pandoc Tricks: Divs and Attributes","title":"Ingredients"},{"location":"recipes/recipes-pandoc/#hard-ones","text":"- Documentation with GitFlow - Collaborate with Distributed - Just taking notes - Joplin or Typora/Dropbox - Git Wiki - Slides - Word docs - eBook - PDF","title":"Hard ones"},{"location":"recipes/recipes-slides-dzslides/","text":"Create a DZSlides presentation Ingredients Markdown editor Pandoc DZslides If you want to do one of those slick presentations with big images and very few words, DZslides is an easy way to do it. Here\u0092s some sample Markdown: --- # H1 or H2 is a Section Title --- Normal Text for Slide Title - Bullet - Bullet --- DZslides uses an H1 or H2 as a section header, which you will probably mostly have on a slide by itself. Normal text is big enough for a title or announcement on a slide. The layout of slides in DZslides is bold and simple; you probably won\u0092t find yourself using tables or columns a lot. Once you have created your slides in Markdown, build them with Pandoc: pandoc -t dzslides -s myslides.md -o myslides.htm The -s option tells Pandoc to create a standalone presentation, including all the CSS, HTML, and JavaScript needed to display it. You can view the resulting HTML file in a browser. Remember, since it\u0092s HTML, you need to keep the images and the presentation together. If you copy your presentation to a thumb drive without the images, you will be unhappy. It\u0092s a good idea to create the Markdown presentation in a folder with all the images it needs, make sure it works in your favorite Markdown editor\u0092s preview mode, then use Pandoc to build the presentation in the same folder. You can copy the folder wherever you need it, knowing that all the images are there.","title":"Create a DZSlides presentation"},{"location":"recipes/recipes-slides-dzslides/#create-a-dzslides-presentation","text":"","title":"Create a DZSlides presentation"},{"location":"recipes/recipes-slides-dzslides/#ingredients","text":"Markdown editor Pandoc","title":"Ingredients"},{"location":"recipes/recipes-slides-dzslides/#dzslides","text":"If you want to do one of those slick presentations with big images and very few words, DZslides is an easy way to do it. Here\u0092s some sample Markdown: --- # H1 or H2 is a Section Title --- Normal Text for Slide Title - Bullet - Bullet --- DZslides uses an H1 or H2 as a section header, which you will probably mostly have on a slide by itself. Normal text is big enough for a title or announcement on a slide. The layout of slides in DZslides is bold and simple; you probably won\u0092t find yourself using tables or columns a lot. Once you have created your slides in Markdown, build them with Pandoc: pandoc -t dzslides -s myslides.md -o myslides.htm The -s option tells Pandoc to create a standalone presentation, including all the CSS, HTML, and JavaScript needed to display it. You can view the resulting HTML file in a browser. Remember, since it\u0092s HTML, you need to keep the images and the presentation together. If you copy your presentation to a thumb drive without the images, you will be unhappy. It\u0092s a good idea to create the Markdown presentation in a folder with all the images it needs, make sure it works in your favorite Markdown editor\u0092s preview mode, then use Pandoc to build the presentation in the same folder. You can copy the folder wherever you need it, knowing that all the images are there.","title":"DZslides"},{"location":"recipes/recipes-slides-remark/","text":"Create a Remark presentation Ingredients Markdown editor Remark.js Remark If you don\u2019t want to use Pandoc, consider Remark: a standalone slide presentation that you edit directly. Because it uses Markdown nestled inside an HTML document, your favorite Markdown editor might get confused. Mine did. This makes it a little less convenient to edit. On the other hand, you don\u2019t need Pandoc \u2014 so you don\u2019t need a computer \u2014 so if you are stuck in an airport with nothing but your phone, Remark might just be your smartest choice. The Markdown is a little different, but shouldn\u2019t look unfamiliar by now: class: center, middle # Remark template .right[Author] .right[Date] --- # Slide title Normal text: * Bullet * Bullet * Bullet ??? Speaker notes go here --- Remark provides some rudimentary CSS to style slides. The first slide uses an H1 header as a section header. The simplified CSS code class: center, middle puts it in the middle of the slide. I added smaller text for the author and date, using .right to right-align it. You can use.right, .left, and .center to align text in different positions on the slide. This does not mean you can easily create columns in Remark. You can do it, but it requires authoring more complicated CSS. You can use H1 or H2 for slide titles \u2014 I prefer H1. Speaker notes are set off with ??? and the usual --- separator denotes slide boundaries. You don\u2019t have to build a Remark presentation; it just is. You can open it in a text editor and a browser. Any changes you save from the text editor show up in the browser when you reload. Like other browser-based slide tools, remember that you need to keep your images where the HTML expects to find them. There is one important choice to make with Remark: you can work with a standalone presentation containing the entire JavaScript that makes it work; a standalone presentation that references the JavaScript from another local file; or a presentation that references the JavaScript from online. The first option is longest but most \u201cstandalone,\u201d and the last is the shortest (and therefore easiest to edit) but requires connectivity.","title":"Create a Remark presentation"},{"location":"recipes/recipes-slides-remark/#create-a-remark-presentation","text":"","title":"Create a Remark presentation"},{"location":"recipes/recipes-slides-remark/#ingredients","text":"Markdown editor Remark.js","title":"Ingredients"},{"location":"recipes/recipes-slides-remark/#remark","text":"If you don\u2019t want to use Pandoc, consider Remark: a standalone slide presentation that you edit directly. Because it uses Markdown nestled inside an HTML document, your favorite Markdown editor might get confused. Mine did. This makes it a little less convenient to edit. On the other hand, you don\u2019t need Pandoc \u2014 so you don\u2019t need a computer \u2014 so if you are stuck in an airport with nothing but your phone, Remark might just be your smartest choice. The Markdown is a little different, but shouldn\u2019t look unfamiliar by now: class: center, middle # Remark template .right[Author] .right[Date] --- # Slide title Normal text: * Bullet * Bullet * Bullet ??? Speaker notes go here --- Remark provides some rudimentary CSS to style slides. The first slide uses an H1 header as a section header. The simplified CSS code class: center, middle puts it in the middle of the slide. I added smaller text for the author and date, using .right to right-align it. You can use.right, .left, and .center to align text in different positions on the slide. This does not mean you can easily create columns in Remark. You can do it, but it requires authoring more complicated CSS. You can use H1 or H2 for slide titles \u2014 I prefer H1. Speaker notes are set off with ??? and the usual --- separator denotes slide boundaries. You don\u2019t have to build a Remark presentation; it just is. You can open it in a text editor and a browser. Any changes you save from the text editor show up in the browser when you reload. Like other browser-based slide tools, remember that you need to keep your images where the HTML expects to find them. There is one important choice to make with Remark: you can work with a standalone presentation containing the entire JavaScript that makes it work; a standalone presentation that references the JavaScript from another local file; or a presentation that references the JavaScript from online. The first option is longest but most \u201cstandalone,\u201d and the last is the shortest (and therefore easiest to edit) but requires connectivity.","title":"Remark"},{"location":"recipes/recipes-slides/","text":"Create a standalone presentation Ingredients Markdown editor Pandoc Powerpoint, Google Drive, or LibreOffice Slides Making Slides with Pandoc: the Basics Pandoc is an everything-to-everything converter, and one of its neatest tricks is turning Markdown into slides. If you can do simple things on the command line, you will have no trouble: Pandoc is easy to install and use. When using Pandoc, you can start your Markdown file with YAML metadata or a simple block like this: % Title % Author Name % Date Then write some Markdown for your slides. Pandoc uses the following rule to figure out what header level to use for slide titles: By default, the slide level is the highest header level in the hierarchy that is followed immediately by content, and not another header, somewhere in the document. In the example above, level 1 headers are always followed by level 2 headers, which are followed by content, so 2 is the slide level. (source) That seems a little complicated, so I played with the Markdown a bit to see what worked in different presentation formats. In general, an H1 or H2 header works for a section header or slide title. Most other Markdown works as you would expect. Some presentation tools work best if you separate slides with three hyphens (---). Building a presentation with Pandoc is simple: pandoc -t -s myslides.md -o myslides.htm Powerpoint With Pandoc, you can go from Markdown directly to Powerpoint. This method offers a great deal of formatting flexibility. Columns, tables, sub-bullets, and images come out just the way you would expect them to look. I had no trouble opening a Pandoc-rendered .pptx file in Powerpoint or importing it into Google Slides. Here is some sample Markdown: # Section Title ## Slide TitleText on a slide: * Bullet * Bullet * Bullet ::: notes Speaker notes go here ::: For Powerpoint slides, Pandoc doesn\u2019t require the hyphen separator. The above Markdown contains two slides: one with an H1 as a section title and another that uses an H2 for the slide title. Notice the ::: \u2014 Pandoc\u2019s fenced div syntax, which lets you do a lot of tricks in various formats. Here, it is just used to delineate the speaker notes. The Pandoc command to build a .pptx file is simple: pandoc myslides.md -o myslides.pptx As you would expect, you don\u2019t need the -s flag (because what is the alternative to a standalone Powerpoint presentation?) and you can open the resulting .pptx file in Powerpoint. But there\u2019s one more piece of magic: pandoc myslides.md -o myslides.pptx --reference-doc another.pptx When you run the command with the --reference-doc parameter, Pandoc takes the theme from the specified existing Powerpoint file and applies it to the new one you are creating. That means if you have a theme you like, you can create a whole presentation in that theme \u2014 no one will know you started with Markdown. This feature doesn\u2019t always work with heavily modified presentations or corporate templates, but I was able to get it to work with built-in templates and one template that I had customized. That fenced div notation lets you create columns using nested divs without writing tags in HTML. Take a look at this example: :::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: - Bullet - Bullet - Bullet ::: ::: {.column width=\"50%\"} ![](bench.jpg) ::: :::::::::::::: That translates to a containing two tags that Pandoc can understand. It uses these to create a slide with columns. Notice that the opening and closing of the outer div has a whole bunch of : characters instead of just three. This is for readability; you can use as few as three if you like. The curly braces let you define attributes such as identifiers, classes, and key/value pairs on headers, images, and a few other elements in Pandoc. If you\u2019re using Pandoc to create Word or other long text documents, this is handy because you can set anchors on headings and link to them internally. Above, we are just using the attributes to add the column and columns classes to the fenced divs to create columns. But there is another cool attributes trick from Pandoc that we can use \u2014 scaling an image: ![Alt text](bench.jpg){width=25%} When Pandoc renders the image, it is scaled to a percentage of the container where it resides (a slide or column, for example). The alt text is used for a caption.","title":"Create a Powerpoint presentation"},{"location":"recipes/recipes-slides/#create-a-standalone-presentation","text":"","title":"Create a standalone presentation"},{"location":"recipes/recipes-slides/#ingredients","text":"Markdown editor Pandoc Powerpoint, Google Drive, or LibreOffice","title":"Ingredients"},{"location":"recipes/recipes-slides/#slides","text":"Making Slides with Pandoc: the Basics Pandoc is an everything-to-everything converter, and one of its neatest tricks is turning Markdown into slides. If you can do simple things on the command line, you will have no trouble: Pandoc is easy to install and use. When using Pandoc, you can start your Markdown file with YAML metadata or a simple block like this: % Title % Author Name % Date Then write some Markdown for your slides. Pandoc uses the following rule to figure out what header level to use for slide titles: By default, the slide level is the highest header level in the hierarchy that is followed immediately by content, and not another header, somewhere in the document. In the example above, level 1 headers are always followed by level 2 headers, which are followed by content, so 2 is the slide level. (source) That seems a little complicated, so I played with the Markdown a bit to see what worked in different presentation formats. In general, an H1 or H2 header works for a section header or slide title. Most other Markdown works as you would expect. Some presentation tools work best if you separate slides with three hyphens (---). Building a presentation with Pandoc is simple: pandoc -t -s myslides.md -o myslides.htm","title":"Slides"},{"location":"recipes/recipes-slides/#powerpoint","text":"With Pandoc, you can go from Markdown directly to Powerpoint. This method offers a great deal of formatting flexibility. Columns, tables, sub-bullets, and images come out just the way you would expect them to look. I had no trouble opening a Pandoc-rendered .pptx file in Powerpoint or importing it into Google Slides. Here is some sample Markdown: # Section Title ## Slide TitleText on a slide: * Bullet * Bullet * Bullet ::: notes Speaker notes go here ::: For Powerpoint slides, Pandoc doesn\u2019t require the hyphen separator. The above Markdown contains two slides: one with an H1 as a section title and another that uses an H2 for the slide title. Notice the ::: \u2014 Pandoc\u2019s fenced div syntax, which lets you do a lot of tricks in various formats. Here, it is just used to delineate the speaker notes. The Pandoc command to build a .pptx file is simple: pandoc myslides.md -o myslides.pptx As you would expect, you don\u2019t need the -s flag (because what is the alternative to a standalone Powerpoint presentation?) and you can open the resulting .pptx file in Powerpoint. But there\u2019s one more piece of magic: pandoc myslides.md -o myslides.pptx --reference-doc another.pptx When you run the command with the --reference-doc parameter, Pandoc takes the theme from the specified existing Powerpoint file and applies it to the new one you are creating. That means if you have a theme you like, you can create a whole presentation in that theme \u2014 no one will know you started with Markdown. This feature doesn\u2019t always work with heavily modified presentations or corporate templates, but I was able to get it to work with built-in templates and one template that I had customized. That fenced div notation lets you create columns using nested divs without writing tags in HTML. Take a look at this example: :::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: - Bullet - Bullet - Bullet ::: ::: {.column width=\"50%\"} ![](bench.jpg) ::: :::::::::::::: That translates to a containing two tags that Pandoc can understand. It uses these to create a slide with columns. Notice that the opening and closing of the outer div has a whole bunch of : characters instead of just three. This is for readability; you can use as few as three if you like. The curly braces let you define attributes such as identifiers, classes, and key/value pairs on headers, images, and a few other elements in Pandoc. If you\u2019re using Pandoc to create Word or other long text documents, this is handy because you can set anchors on headings and link to them internally. Above, we are just using the attributes to add the column and columns classes to the fenced divs to create columns. But there is another cool attributes trick from Pandoc that we can use \u2014 scaling an image: ![Alt text](bench.jpg){width=25%} When Pandoc renders the image, it is scaled to a percentage of the container where it resides (a slide or column, for example). The alt text is used for a caption.","title":"Powerpoint"},{"location":"resources/","text":"Test Here: In snippets folder","title":"Test"},{"location":"resources/#test","text":"Here: In snippets folder","title":"Test"},{"location":"resources/links/","text":"Links Here: In snippets folder","title":"Links"},{"location":"resources/links/#links","text":"Here: In snippets folder","title":"Links"},{"location":"resources/markdown-cheatsheet/","text":"Markdown cheatsheet Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Line breaks and paragraphs Consecutive lines of any length run together and become a single paragraph. An empty line ends the paragraph and starts a new one. Two spaces at the end of a line Forces a line break without Starting a new paragraph. Text effects *emphasis* (italics) _emphasis_ (italics) **strong** (bold) __strong__ (bold) **combined _emphasis_** `code` ~~strikethrough~~ Lists Bullet list: * Asterisks, plus signs, or minus signs Indent two spaces to add another paragraph in a list item * Another list item Numbered list: 1. The numbers don't matter. 1. Markdown numbers when it renders Indent three spaces to add another paragraph in a list item 1. Lists inside lists: * Ordered and unordered lists work Links You can define links inline or by reference. Reference links have a label\u2014often, the simplest thing to do us just use a number, like this: [1] This is an [inline-style link](https://www.example.com). A link can have a [title](https://www.example.com \"Example title\"). Links can be defined later by [reference][label text or number]. ... [label text or number]: https://www.example.com/any/label/text/is/fine Images You define an image just like a link, but with an exclamation mark. Inline: ![alt text](https://www.example.com/images/some-image.png). Reference ![alt text][label text]. ... [label text]: https://www.example.com/images/some-image.png Code blocks There are two ways to create code blocks, both of which can be embedded in lists. In standard Markdown, indent by 4 spaces: 10 PRINT \"HELLO\" 20 GOTO 10 Many Markdown flavors provide the capability to do a fenced code block, surrounded by three backticks. You can indicate the language for syntax highlighting: ``` basic 10 PRINT \"HELLO\" 20 GOTO 10 ``` Blockquotes > Use a greater-than sign plus a space at the beginning of a paragraph. You can add it to the start of every line, or just the first line in the paragraph. > But it looks better to put it at the start of every line. It makes it easier to > see which lines are part of the blockquote. Tables HTML tables are more powerful, more flexible, and more reliable. But some flavors of Markdown include simple table notations. Default alignment is left. | Header | Row is | mandatory | | --------------- |:---------------:| ------------------:| | Separate header | Colons on both | Colon on the right | | from other rows | sides align the | aligns the row to | | with hyphens | row to center | the right | Horizontal rule Three ways to add a horizontal rule\u2014three or more hyphens, asterisks, or underscores: --- *** ___ Comments There are two ways to write comments: HTML-style comments, which are rendered as part of the HTML source code, and two kinds of link-style comments that are a bit of a hack and don't get rendered at all. <!-- HTML-style comments --> are visible in Markdown and in rendered HTML. [//]: # \"This comment\" is only visible in the Markdown and doesn't get rendered. [comment]: < > \"This comment\" is only visible in the Markdown and doesn't get rendered. HTML and special characters HTML is part of Markdown. You can use HTML to insert tables, formatting, special characters, and other features that Markdown doesn't support directly. HTML tables are often better and easier than Markdown tables. You can escape characters with a backslash (\\) or use HTML codes: &mdash; em-dash &ndash; en-dash &#35; octothorpe &#42; asterisk","title":"Markdown cheatsheet"},{"location":"resources/markdown-cheatsheet/#markdown-cheatsheet","text":"Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Line breaks and paragraphs Consecutive lines of any length run together and become a single paragraph. An empty line ends the paragraph and starts a new one. Two spaces at the end of a line Forces a line break without Starting a new paragraph. Text effects *emphasis* (italics) _emphasis_ (italics) **strong** (bold) __strong__ (bold) **combined _emphasis_** `code` ~~strikethrough~~ Lists Bullet list: * Asterisks, plus signs, or minus signs Indent two spaces to add another paragraph in a list item * Another list item Numbered list: 1. The numbers don't matter. 1. Markdown numbers when it renders Indent three spaces to add another paragraph in a list item 1. Lists inside lists: * Ordered and unordered lists work Links You can define links inline or by reference. Reference links have a label\u2014often, the simplest thing to do us just use a number, like this: [1] This is an [inline-style link](https://www.example.com). A link can have a [title](https://www.example.com \"Example title\"). Links can be defined later by [reference][label text or number]. ... [label text or number]: https://www.example.com/any/label/text/is/fine Images You define an image just like a link, but with an exclamation mark. Inline: ![alt text](https://www.example.com/images/some-image.png). Reference ![alt text][label text]. ... [label text]: https://www.example.com/images/some-image.png Code blocks There are two ways to create code blocks, both of which can be embedded in lists. In standard Markdown, indent by 4 spaces: 10 PRINT \"HELLO\" 20 GOTO 10 Many Markdown flavors provide the capability to do a fenced code block, surrounded by three backticks. You can indicate the language for syntax highlighting: ``` basic 10 PRINT \"HELLO\" 20 GOTO 10 ``` Blockquotes > Use a greater-than sign plus a space at the beginning of a paragraph. You can add it to the start of every line, or just the first line in the paragraph. > But it looks better to put it at the start of every line. It makes it easier to > see which lines are part of the blockquote. Tables HTML tables are more powerful, more flexible, and more reliable. But some flavors of Markdown include simple table notations. Default alignment is left. | Header | Row is | mandatory | | --------------- |:---------------:| ------------------:| | Separate header | Colons on both | Colon on the right | | from other rows | sides align the | aligns the row to | | with hyphens | row to center | the right | Horizontal rule Three ways to add a horizontal rule\u2014three or more hyphens, asterisks, or underscores: --- *** ___ Comments There are two ways to write comments: HTML-style comments, which are rendered as part of the HTML source code, and two kinds of link-style comments that are a bit of a hack and don't get rendered at all. <!-- HTML-style comments --> are visible in Markdown and in rendered HTML. [//]: # \"This comment\" is only visible in the Markdown and doesn't get rendered. [comment]: < > \"This comment\" is only visible in the Markdown and doesn't get rendered. HTML and special characters HTML is part of Markdown. You can use HTML to insert tables, formatting, special characters, and other features that Markdown doesn't support directly. HTML tables are often better and easier than Markdown tables. You can escape characters with a backslash (\\) or use HTML codes: &mdash; em-dash &ndash; en-dash &#35; octothorpe &#42; asterisk","title":"Markdown cheatsheet"},{"location":"resources/pandoc_tricks/","text":"Control image size {width=25} In Word and Powerpoint, doesn't seem to honor percent Columns {#Cols} :::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: Looks good Stays over here Lets the image do its thing ::: ::: {.column width=\"50%\"} ::: :::::::::::::: Works in Powerpoint but not Word Internal Links You can link to headings in the document in either style (see Columns ). See Columns . You can also use implicit ones (see [Control image size]). Line Blocks | This is for things That should not wrap. Numbered Example Lists (@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). (@good) This is a good example. Numbering works in Word but not Powerpoint Linking to Examples As (@good) illustrates, ... Divs ::::: {#special .sidebar} Here is a paragraph. And another. ::::: ::: Warning :::::: This is a warning. ::: Danger This is a warning within a warning. ::: :::::::::::::::::: Spans [This is some text ]{.class key=\"val\"} Small caps [Small caps]{.smallcaps} Small caps Small caps","title":"Pandoc Tricks"},{"location":"resources/pandoc_tricks/#control-image-size","text":"{width=25} In Word and Powerpoint, doesn't seem to honor percent","title":"Control image size"},{"location":"resources/pandoc_tricks/#columns-cols","text":":::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: Looks good Stays over here Lets the image do its thing ::: ::: {.column width=\"50%\"} ::: :::::::::::::: Works in Powerpoint but not Word","title":"Columns {#Cols}"},{"location":"resources/pandoc_tricks/#internal-links","text":"You can link to headings in the document in either style (see Columns ). See Columns . You can also use implicit ones (see [Control image size]).","title":"Internal Links"},{"location":"resources/pandoc_tricks/#line-blocks","text":"| This is for things That should not wrap.","title":"Line Blocks"},{"location":"resources/pandoc_tricks/#numbered-example-lists","text":"(@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). (@good) This is a good example. Numbering works in Word but not Powerpoint","title":"Numbered Example Lists"},{"location":"resources/pandoc_tricks/#linking-to-examples","text":"As (@good) illustrates, ...","title":"Linking to Examples"},{"location":"resources/pandoc_tricks/#divs","text":"::::: {#special .sidebar} Here is a paragraph. And another. ::::: ::: Warning :::::: This is a warning. ::: Danger This is a warning within a warning. ::: ::::::::::::::::::","title":"Divs"},{"location":"resources/pandoc_tricks/#spans","text":"[This is some text ]{.class key=\"val\"}","title":"Spans"},{"location":"resources/pandoc_tricks/#small-caps","text":"[Small caps]{.smallcaps} Small caps Small caps","title":"Small caps"},{"location":"resources/resources-glossary/","text":"Glossary admonition A note, warning, or other call-out that draws attention to a block of content. dynamic site See static site. package manager A tool for installing software. See Getting started remote A * remote repository remote repository A version of your project that is hosted on the network or online rather than on your computer. repo Repository static site A site composed of HTML pages or other documents that are made available exactly as stored, as opposed to a dynamic site whose pages are rendered on the fly when they are requested. A static site often performs better and can be more secure, but lacks some of the capabilities of a dynamic site. static site generator A tool that builds a static site. WYSIWYG \"What you see is what you get\"\u2014an editing experience that mimics the appearance of the document in its final form.","title":"Glossary"},{"location":"resources/resources-glossary/#glossary","text":"admonition A note, warning, or other call-out that draws attention to a block of content. dynamic site See static site. package manager A tool for installing software. See Getting started remote A * remote repository remote repository A version of your project that is hosted on the network or online rather than on your computer. repo Repository static site A site composed of HTML pages or other documents that are made available exactly as stored, as opposed to a dynamic site whose pages are rendered on the fly when they are requested. A static site often performs better and can be more secure, but lacks some of the capabilities of a dynamic site. static site generator A tool that builds a static site. WYSIWYG \"What you see is what you get\"\u2014an editing experience that mimics the appearance of the document in its final form.","title":"Glossary"},{"location":"resources/templates/","text":"Templates DZSlides Tell where you put it, link to recipe % DZslides template for Pandoc % Peter Conrad % 26 November 2019 # Section titles - H1 or H2 - Centered on slide - Not much room below <!-- An H1 or H2 renders as a large title in the middle of the slide. There is room for a small number of bullets below, but it looks nicer with the title alone. --> --- How to do a slide - Use \\-\\-\\- to separate slides - Use regular text and bullets - H1 or H2 for a section title <!-- Regular text starts closer to the top of the slide. A normal text phrase plus bullets makes for a simple, attractive slide. --> --- # Images --- You can use images. - Provide width and height - Keep them with the HTML file ![](bench.jpg){width=33% height=33%} <!-- If you omit width and height, the images tend to appear pixel-for-pixel at the resolution of the screen. This often means: very huge. Pandoc can resize the images for you. Remember that you need to keep the image files with your presentation's HTML file or they won't show up. --> --- ![Full-screen image with alt text](bench.jpg){width=100% height=100%} <!-- For some reason, a full-screen image renders properly even if you omit the width and height tags. I have left them in to foster good habits. --> --- # Columns --- :::::::::::::: {.columns} ::: {.column width=\"50%\"} Columns work ::: ::: {.column width=\"50%\"} **Lists** in columns don't work ![](../path/to/image.jpg){width=100% height=100%} <!-- 100% of this column, that is --> ::: :::::::::::::: <!-- Pandoc supports multiple columns in slide shows. I get the impression that DZslides is designed to create a slide show with a very simple, uncluttered look. If you are using a lot of columns, you might consider a different slide format. --> --- # Syntax --- Emphasis - **bold** - *italic* - **_both_** - ~~strike~~ --- > Blockquotes look like this --- Lists - Bullets work - Indenting works - Ordered lists don't - By themselves, they go to the left edge - As a sub-list, they outdent to the next level --- Incremental \"build\" slides ::: incremental - Incremental slides work - This is how they look - It's fine ::: --- A slide with a pause can work. . . . Or can it? --- Tables work but they are not well padded and they are stuck at the top left of the slide. --- Don't use inline code or code blocks. They don't look quite right. --- # Thank you Powerpoint Tell where you put it, link to recipe % Pandoc Template for Powerpoint % Peter Conrad % 22 November 2019 # Section Title ## How to do a slide You'll be happiest if you use: * H1 for section titles - H2 for slide titles + H3 for additional headings in slides ::: notes Speaker notes go here ::: ## Two-column slide with image :::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: - Looks good - Stays over here - Lets the image do its thing ::: ::: {.column width=\"50%\"} ![](bench.jpg) ::: :::::::::::::: ::: notes Speaker notes go here ::: ## Table | Heading | Heading | Heading | Heading | Heading | | --- | --- | --- | --- | --- | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | ::: notes Speaker notes go here ::: ## Limitations Things that don't work - HTML in your Markdown - CSS - Builds - (pauses or incremental lists) - Inline monospace ::: notes Speaker notes go here ::: ## Things that work very well - Images resize nicely (but don't fill the screen) - Tables look nice - You don't have to take your images with you ::: notes Speaker notes go here ::: ## An image ![Alt text looks like this](../path/to/image.jpg){width=25%} ::: notes Speaker notes go here ::: ## Headings Headings H3 and lower look the same. ### H3 #### H4 ##### H5 ###### H6 ::: notes Speaker notes go here ::: ## Emphasis - **bold** - *italic* - **_both_** - ~~strike~~ ::: notes Speaker notes go here ::: ## Bullet lists - Bullets work - Indenting works - Don't try to do multiple lists on a single slide ## Ordered lists 1. Ordered lists work 1. Sub-lists in ordered lists 1. Next item ::: notes Speaker notes go here ::: # Thank you Remark Tell where you put it, link to recipe <textarea id=\"source\"> class: center, middle # Title --- # Agenda 1. Introduction 2. Deep-dive 3. ... --- # Introduction </textarea>","title":"Templates"},{"location":"resources/templates/#templates","text":"","title":"Templates"},{"location":"resources/templates/#dzslides","text":"Tell where you put it, link to recipe % DZslides template for Pandoc % Peter Conrad % 26 November 2019 # Section titles - H1 or H2 - Centered on slide - Not much room below <!-- An H1 or H2 renders as a large title in the middle of the slide. There is room for a small number of bullets below, but it looks nicer with the title alone. --> --- How to do a slide - Use \\-\\-\\- to separate slides - Use regular text and bullets - H1 or H2 for a section title <!-- Regular text starts closer to the top of the slide. A normal text phrase plus bullets makes for a simple, attractive slide. --> --- # Images --- You can use images. - Provide width and height - Keep them with the HTML file ![](bench.jpg){width=33% height=33%} <!-- If you omit width and height, the images tend to appear pixel-for-pixel at the resolution of the screen. This often means: very huge. Pandoc can resize the images for you. Remember that you need to keep the image files with your presentation's HTML file or they won't show up. --> --- ![Full-screen image with alt text](bench.jpg){width=100% height=100%} <!-- For some reason, a full-screen image renders properly even if you omit the width and height tags. I have left them in to foster good habits. --> --- # Columns --- :::::::::::::: {.columns} ::: {.column width=\"50%\"} Columns work ::: ::: {.column width=\"50%\"} **Lists** in columns don't work ![](../path/to/image.jpg){width=100% height=100%} <!-- 100% of this column, that is --> ::: :::::::::::::: <!-- Pandoc supports multiple columns in slide shows. I get the impression that DZslides is designed to create a slide show with a very simple, uncluttered look. If you are using a lot of columns, you might consider a different slide format. --> --- # Syntax --- Emphasis - **bold** - *italic* - **_both_** - ~~strike~~ --- > Blockquotes look like this --- Lists - Bullets work - Indenting works - Ordered lists don't - By themselves, they go to the left edge - As a sub-list, they outdent to the next level --- Incremental \"build\" slides ::: incremental - Incremental slides work - This is how they look - It's fine ::: --- A slide with a pause can work. . . . Or can it? --- Tables work but they are not well padded and they are stuck at the top left of the slide. --- Don't use inline code or code blocks. They don't look quite right. --- # Thank you","title":"DZSlides"},{"location":"resources/templates/#powerpoint","text":"Tell where you put it, link to recipe % Pandoc Template for Powerpoint % Peter Conrad % 22 November 2019 # Section Title ## How to do a slide You'll be happiest if you use: * H1 for section titles - H2 for slide titles + H3 for additional headings in slides ::: notes Speaker notes go here ::: ## Two-column slide with image :::::::::::::: {.columns} ::: {.column width=\"50%\"} Left column: - Looks good - Stays over here - Lets the image do its thing ::: ::: {.column width=\"50%\"} ![](bench.jpg) ::: :::::::::::::: ::: notes Speaker notes go here ::: ## Table | Heading | Heading | Heading | Heading | Heading | | --- | --- | --- | --- | --- | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | | Cell | Cell | Cell | Cell | Cell | ::: notes Speaker notes go here ::: ## Limitations Things that don't work - HTML in your Markdown - CSS - Builds - (pauses or incremental lists) - Inline monospace ::: notes Speaker notes go here ::: ## Things that work very well - Images resize nicely (but don't fill the screen) - Tables look nice - You don't have to take your images with you ::: notes Speaker notes go here ::: ## An image ![Alt text looks like this](../path/to/image.jpg){width=25%} ::: notes Speaker notes go here ::: ## Headings Headings H3 and lower look the same. ### H3 #### H4 ##### H5 ###### H6 ::: notes Speaker notes go here ::: ## Emphasis - **bold** - *italic* - **_both_** - ~~strike~~ ::: notes Speaker notes go here ::: ## Bullet lists - Bullets work - Indenting works - Don't try to do multiple lists on a single slide ## Ordered lists 1. Ordered lists work 1. Sub-lists in ordered lists 1. Next item ::: notes Speaker notes go here ::: # Thank you","title":"Powerpoint"},{"location":"resources/templates/#remark","text":"Tell where you put it, link to recipe <textarea id=\"source\"> class: center, middle # Title --- # Agenda 1. Introduction 2. Deep-dive 3. ... --- # Introduction </textarea>","title":"Remark"},{"location":"tools/","text":"Tools ...?","title":"Tools"},{"location":"tools/#tools","text":"...?","title":"Tools"},{"location":"tools/tools-editors/","text":"Markdown editors Markdown editors let you edit your content and often integrate with conversion and publishing tools. There are a few different types available: Dedicated Markdown editors usually let you write and edit Markdown code with syntax highlighting, and often have a preview pane or separate preview window. Code editors can be quite extensible and sophisticated, offering plugins and packages that provide many of the capabilities of a dedicated Markdown editor. Text editors are often more general-purpose than dedicated Markdown editors, and may or may not offer Markdown syntax highlighing or preview. Browser-based tools range from simple Markdown preview tools to full-featured writing and publishing tools that integrate with source control, blogging, or collaboration websites For blogging, you can use a browser-based tool \u2014in fact, some blogging sites support Markdown already. If you plan to create and manage documentation or other complex writing projects, it makes sense to install a dedicated Markdown editor . If you are adding Markdown to your code development environment, several code editors support Markdown very nicely. I have used Joplin and iA Writer, but I use Typora and Ghostwriter most often. Dedicated Markdown editors Most dedicated editors are designed so that you edit the Markdown directly, with syntax highlighting to make it easier to see that's going on. That's the original intention behind Markdown, after all: to provide formatting tools that are easy to read and don't require you to lift your fingers from the keys. For general purposes, many dedicated Markdown editors are fairly similar, differing in only a few features. Two tools in particular stand out: Joplin, a specialized editor for writing notes and to-do lists Typora, an elegant WYSIWYG editor for Markdown Byword Byword (macOS/iOS) provides syntax highlighting and an in-app preview, letting you exprt to a few formats or publish directly to Medium, WorkPress, Blogger, Tumblr, and Evernote. Caret Caret (macOS/Windows/Linux) offers interesting features such as a folders/files view, multiple cursors, keyboard-based selection tools, and smart help with tables and other formatting features. Ghostwriter Ghostwriter (Windows/Linux) is a free and open source split-screen editor that integrates with Pandoc and offers smaller \"heads-up display\" windows that provide document information and a Markdown cheat sheet. iA Writer iA Writer (macOS/iOS/Android/Windows) is intended for writers who want to focus. It integrates with Dropbox, provides the expected preview capabilities, and imports and exports to Microsoft Word. Joplin Joplin (macOS/iOS/Android/Windows/Linux) is an open-source note-taking and to-do application that syncs to DropBox, OneDrive, and other cloud storage. It includes an editor, but also supports the external editor of your choice. It offers end-to-end encryption and can import Evernote notebooks. MacDown MacDown (macOS) is an open source Markdown editor with a split screen and live preview, inspired by an early Markdown editor called Mou . Typora Typora (macOS, Windows, Linux) is a Markdown editor that includes not only a syntax editing mode but a fully WYSIWYG editing experience. It integrates with Pandoc, so it can import and export a number of formats. Typora offers a files and folders view, which means it can be used for longer documents or as a note-taking application. Code editors If you are documenting code in a large organization, you might need to write Markdown that meets fairly stringent standards to work with your documentation management and publishing system. Code editors, while they are not designed specifically for Markdown, sometimes offer sophisticated packages to support Markdown editing and preview. An advantage of a code editor is the ability to do things like jump to a specific line number or set text wrapping rules. The following editors, among others, are worth a look: Atom Sublime Text Visual Studio Code Text editors Because Markdown is just plain text, even the simplest text editor can be a capable tool. Some well-established text editors offer Markdown modes: BbEdit Emacs Vim Browser-based tools Browser-based Markdown tools can be an easy, portable way to write Markdown that you intend to publish to a blog. Some integrate directly with Git hosts, blogging sites, or cloud storage. Dillinger Dillinger is an open source online Markdown editor that integrates with DropBox, GitHub, Google Drive, and OneDrive. You can also import from BitBucket, or upload Markdown and HTML files from your computer. HackMD HackMD is an online Markdown editor, free for personal use, that integrates with GitHub and includes tools for creating slides . StackEdit StackEdit is a full-featured Markdown editor that syncs with DropBox, GitHub, GitLab, and Google Drive. You can import Markdown and HTML files, export with Pandoc, and publish to Blogger, Wordpress, and Zendesk. Markdown Dingus Markdown Dingus shows how John Gruber's official version of Markdown renders to HTML. Babelmark Babelmark is a useful tool for comparing the way different implementations and flavors render Markdown. If you are trying to figure out whether you have a problem in your Markdown or are merely using a feature that's not supported in the Markdown flavor you're using, Babelmark can help.","title":"Markdown editors"},{"location":"tools/tools-editors/#markdown-editors","text":"Markdown editors let you edit your content and often integrate with conversion and publishing tools. There are a few different types available: Dedicated Markdown editors usually let you write and edit Markdown code with syntax highlighting, and often have a preview pane or separate preview window. Code editors can be quite extensible and sophisticated, offering plugins and packages that provide many of the capabilities of a dedicated Markdown editor. Text editors are often more general-purpose than dedicated Markdown editors, and may or may not offer Markdown syntax highlighing or preview. Browser-based tools range from simple Markdown preview tools to full-featured writing and publishing tools that integrate with source control, blogging, or collaboration websites For blogging, you can use a browser-based tool \u2014in fact, some blogging sites support Markdown already. If you plan to create and manage documentation or other complex writing projects, it makes sense to install a dedicated Markdown editor . If you are adding Markdown to your code development environment, several code editors support Markdown very nicely. I have used Joplin and iA Writer, but I use Typora and Ghostwriter most often.","title":"Markdown editors"},{"location":"tools/tools-editors/#dedicated-markdown-editors","text":"Most dedicated editors are designed so that you edit the Markdown directly, with syntax highlighting to make it easier to see that's going on. That's the original intention behind Markdown, after all: to provide formatting tools that are easy to read and don't require you to lift your fingers from the keys. For general purposes, many dedicated Markdown editors are fairly similar, differing in only a few features. Two tools in particular stand out: Joplin, a specialized editor for writing notes and to-do lists Typora, an elegant WYSIWYG editor for Markdown","title":"Dedicated Markdown editors"},{"location":"tools/tools-editors/#byword","text":"Byword (macOS/iOS) provides syntax highlighting and an in-app preview, letting you exprt to a few formats or publish directly to Medium, WorkPress, Blogger, Tumblr, and Evernote.","title":"Byword"},{"location":"tools/tools-editors/#caret","text":"Caret (macOS/Windows/Linux) offers interesting features such as a folders/files view, multiple cursors, keyboard-based selection tools, and smart help with tables and other formatting features.","title":"Caret"},{"location":"tools/tools-editors/#ghostwriter","text":"Ghostwriter (Windows/Linux) is a free and open source split-screen editor that integrates with Pandoc and offers smaller \"heads-up display\" windows that provide document information and a Markdown cheat sheet.","title":"Ghostwriter"},{"location":"tools/tools-editors/#ia-writer","text":"iA Writer (macOS/iOS/Android/Windows) is intended for writers who want to focus. It integrates with Dropbox, provides the expected preview capabilities, and imports and exports to Microsoft Word.","title":"iA Writer"},{"location":"tools/tools-editors/#joplin","text":"Joplin (macOS/iOS/Android/Windows/Linux) is an open-source note-taking and to-do application that syncs to DropBox, OneDrive, and other cloud storage. It includes an editor, but also supports the external editor of your choice. It offers end-to-end encryption and can import Evernote notebooks.","title":"Joplin"},{"location":"tools/tools-editors/#macdown","text":"MacDown (macOS) is an open source Markdown editor with a split screen and live preview, inspired by an early Markdown editor called Mou .","title":"MacDown"},{"location":"tools/tools-editors/#typora","text":"Typora (macOS, Windows, Linux) is a Markdown editor that includes not only a syntax editing mode but a fully WYSIWYG editing experience. It integrates with Pandoc, so it can import and export a number of formats. Typora offers a files and folders view, which means it can be used for longer documents or as a note-taking application.","title":"Typora"},{"location":"tools/tools-editors/#code-editors","text":"If you are documenting code in a large organization, you might need to write Markdown that meets fairly stringent standards to work with your documentation management and publishing system. Code editors, while they are not designed specifically for Markdown, sometimes offer sophisticated packages to support Markdown editing and preview. An advantage of a code editor is the ability to do things like jump to a specific line number or set text wrapping rules. The following editors, among others, are worth a look: Atom Sublime Text Visual Studio Code","title":"Code editors"},{"location":"tools/tools-editors/#text-editors","text":"Because Markdown is just plain text, even the simplest text editor can be a capable tool. Some well-established text editors offer Markdown modes: BbEdit Emacs Vim","title":"Text editors"},{"location":"tools/tools-editors/#browser-based-tools","text":"Browser-based Markdown tools can be an easy, portable way to write Markdown that you intend to publish to a blog. Some integrate directly with Git hosts, blogging sites, or cloud storage.","title":"Browser-based tools"},{"location":"tools/tools-editors/#dillinger","text":"Dillinger is an open source online Markdown editor that integrates with DropBox, GitHub, Google Drive, and OneDrive. You can also import from BitBucket, or upload Markdown and HTML files from your computer.","title":"Dillinger"},{"location":"tools/tools-editors/#hackmd","text":"HackMD is an online Markdown editor, free for personal use, that integrates with GitHub and includes tools for creating slides .","title":"HackMD"},{"location":"tools/tools-editors/#stackedit","text":"StackEdit is a full-featured Markdown editor that syncs with DropBox, GitHub, GitLab, and Google Drive. You can import Markdown and HTML files, export with Pandoc, and publish to Blogger, Wordpress, and Zendesk.","title":"StackEdit"},{"location":"tools/tools-editors/#markdown-dingus","text":"Markdown Dingus shows how John Gruber's official version of Markdown renders to HTML.","title":"Markdown Dingus"},{"location":"tools/tools-editors/#babelmark","text":"Babelmark is a useful tool for comparing the way different implementations and flavors render Markdown. If you are trying to figure out whether you have a problem in your Markdown or are merely using a feature that's not supported in the Markdown flavor you're using, Babelmark can help.","title":"Babelmark"},{"location":"tools/tools-git-basics/","text":"Git basics This page has the workflows and commands you'll use in the recipes, and some hints to get you out of trouble. Hint It might not be worth it to read through this page all the way through. Just refer to the parts you need. The recipes link to them. Branching workflows There are many possible branching workflows, but only two in this guide: Git Centralized Workflow : all work is done in a single branch GitHub Flow : different pieces of work are done in different branches Centralized Git workflow In the centralized Git workflow, everyone works on a single branch (usually called master ). Changes are committed to the local repository on each contributor's own computer. From time to time, each user pushes changes to a remote Git repository. Here are the operations a contributor performs when working in the centralized Git workflow. 1. Pull Fetch the latest changes from the remote repository to the local repository on your computer 2. Work Edit your content in your favorite Markdown editor 3. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git 4. Push When your work is final, push it up to the remote repository In the event that two people create conflicting changes, they can be manually resolved and then merged. Although this workflow is called \"centralized,\" it doesn't really resemble the old centralized source control model. The central remote repository is not a single source of truth, because every contributor has their own copy of the entire repository. The following recipes use the centralized Git workflow: Edit a Git wiki Collaborate using centralized Git workflow GitHub flow In the GitHub flow, you start a new branch based on master whenever you start a group of related tasks. How you organize those tasks, and how you decide which ones belong in a branch together, is up to you. Just like in the centralized workflow, you commit changes frequently to your own local repository. When you push to the remote repo, you create a copy of your branch there so that others can review your changes before they are merged back into master . Here's how your day looks in the GitHub flow. 1. Pull Make sure you're on the master branch and sync the latest changes from the remote repository. 2. Create a branch Create (\"check out\") a branch for working on the current part of the content. 3. Work Edit your content in your favorite Markdown editor. 4. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git. 5. Push From time to time, sync your branch up to the remote repository. 6. Create a pull request When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request. 7. Merge When your work is approved, merge your branch into master on the remote repository Merge conflicts in the same branch are less likely, because you are creating your own branches and other people don't necessarily work in your branch with you. Before you push your branch to the remote repo, you can pull from master again and merge any conflicts locally. Hint After you've pushed, approved, and merged your work, you can delete your working branch or keep it around for further work. When you start work on a different part of the project, remember to switch to master and pull again before creating a new branch. The following recipe uses the GitHub flow: Managing docs with GitHub flow How to Git These are the commands that make up the steps in the Git branching workflows. Pull The Git pull command fetches and downloads content from your remote repository, automatically merges the changes with your local repository, and updates everything so that your repository matches the latest version of everything on the remote. It's a good idea to pull after making sure you're on the right branch and before starting to work on the content. Sourcetree Make sure you're on the right branch in the correct repository: The bold text under Branches tells you the branch The tab at the top of the screen tells you the repository Select Repository > Pull or click the Pull button. GitHub Desktop In GitHub Desktop, you can fetch and pull separately. Fetch gets the latest updates from origin but doesn't update your local working copy with the changes. After you click Fetch origin , the button changes to Pull Origin . Make sure you're on the right branch in the correct repository: The bold text under Current branch tells you the branch The bold text under Current repository tells you the repository Select Repository > Pull or: Click the Fetch origin button. Click the Pull origin button. Linux command line Make sure you're on the right branch in the correct repository: $ git branch * master $ git remote -v origin https://github.com/pconrad-fb/markdown.git (fetch) origin https://github.com/pconrad-fb/markdown.git (push) Type the git pull command: $ git pull Stage and commit Git knows when you make changes to your files. When you want to save those changes to Git, you must do two things: stage them, which tells Git which changes you intend to keep commit them, which saves the changes. Sourcetree In Sourcetree, you stage and commit your files in two operations. Make sure you're on the right branch in the correct repository. Look for the files you changed in the Unstaged files pane. Select the files you want to stage\u2014in most cases, you can just click Stage All. Make sure you see the right files in the Staged files pane. Type a short commit message and click Commit . GitHub Desktop In GitHub Desktop, you can stage and commit your files in one step. Make sure you're on the right branch in the correct repository. Look for the files you changed in the Changes tab. Unselect any files you don't want to change\u2014most of the time, you can leave all the checkboxes checked. Type a short commit message. Make sure the Commit button refers to the correct branch (\"Commit to master,\" for example). Click Commit to [branch] . Linux command line Make sure you're on the right branch in the correct repository. Use git status to see what changes are not yet staged. Stage any changes you plan to commit. In many cases, you can stage all the changes at once like this: $ git add * Commit the changes, adding a descriptive message: $ git commit -m \"Type your descriptive message here.\" Hint If you are changing files but not adding or deleting any files, you can often stage and commit all in one line with commit -am like so: $ git commit -am \"Type your descriptive message here.\" Push Sourcetree Make sure you're on the right branch in the correct repository. Select Repository > Push or click the Push button. GitHub Desktop Make sure you're on the right branch in the correct repository. Select Repository > Push or click the Push origin button. Linux command line Make sure you're on the right branch in the correct repository. Push, specifying the remote (usually origin ) and the branch. For the recipes where you are working on the master branch, the command looks like this: $ git push origin master Of course, since git knows what branch you're on and where your remote is, you can sometimes just type git push . Create a branch Sourcetree Pull from master. Click the Branch button: Type a descriptive name and click Create Branch . Look under Branches to see that you're on the new branch. You can switch to a different branch by clicking it in the list of branches. GitHub Desktop Pull from master. Click the Current branch tab and click New branch : Type a descriptive name and click Create branch : Click Publish branch : Look under Branches to see that you're on the new branch. You can switch to a different branch by clicking it in the list of branches. Linux command line Pull from master to make sure you have the latest changes: $ git checkout master Already on 'master' Your branch is up to date with 'origin/master'. $ git pull Already up to date. Create a new branch and switch to it with git checkout -b . Example: $ git checkout -b test-branch Switched to a new branch 'test-branch' You can switch to any existing branch by typing git checkout <branch-name> without the -b . Example: $ git checkout -b test-branch Switched to branch 'test-branch' Hint You can't switch branches with uncommitted changes. You have to commit before switching to a new branch. Create a pull request Bitbucket and Sourcetree Click Repository > Create pull request . In the dialog that appears, click Create Pull Request On Web : Type a description, add reviewers, and click Create pull request : GitHub and GitHub Desktop When you push, the banner with the Push button changes \"Create a pull request from your current branch.\" Click Create Pull Request : The browser opens a page with a form for creating a pull request: Click the gear next to Reviewers to add reviewers: Click Create pull request . Linux command line Take a look at the output from the push command: $ git push origin test-branch Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 4 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 4.39 KiB | 1.10 MiB/s, done. Total 10 (delta 2), reused 0 (delta 0) remote: Resolving deltas: 100% (2/2), completed with 1 local object. remote: remote: Create a pull request for 'test-branch' on GitHub by visiting: remote: https://github.com/pconrad-fb/markdown/pull/new/test-branch remote: To https://github.com/pconrad-fb/markdown.git * [new branch] test-branch -> test-branch Copy the URL from the line after Create a pull request into a browser. Follow the instructions on screen. If you get stuck, you can see some hints in the instructions for Bitbucket or GitHub. Approve and merge Merge your branch online in the web interface of your Git host. Bitbucket When your pull request is sufficiently approved, click Merge : GitHub When your pull request is sufficiently approved, click Merge : Getting out of trouble If you get out into the woods with Git, there's usually a way to get back\u2014but for this kind of magic, you have to go to the command line. Working in the wrong branch So you've edited a file in the wrong branch. What you'd like to be able to do is undo those changes, switch branches, then re-do them. Actually, it would be even better to lift those changes off of the wrong branch, laying them gently on top of the branch you meant to be in. Fortunately, Git provides a command called stash that does exactly that. Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' 1. In the branch where you were erroneously working, stash your uncommitted changes: $ git stash Switch to the branch you wish you had been working in, and apply the changes there: $ git stash apply Editing the wrong file You opened a file to look at it, but then your cat walked across the keyboard. You're not sure what was added or deleted. You just want to go back to the way things were at the last commit. For this, use checkout . Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' Use git status to see what files were accidentally modified. For example: $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: dont-change-this.md Use git checkout to undo the changes. For example: git checkout -- dont-change-this.md Staged too soon You edited the right file the right way, but then you added it to the staging area too hastily. You don't want to undo your changes to the file, but you would like to remove it from the next commit. This is one of the uses of reset . You can also use reset to do more drastic rollbacks. You can undo entire commits if you want. Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' Use git status to see what files were accidentally modified. For example: $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README modified: dont-commit-this.md Use git reset to remove the file from the next commit. For example: git reset HEAD dont-commit-this.md Merge conflicts When Git is unable to automatically merge, it means that two changes happened in the same place in the same file. That means you need to edit the file and decide which of the two changes to keep. When you open the file, the merge conflict looks like this: <<<<<<< HEAD Some content that was changed by one person ======= Other content that someone else changed >>>>>>> 9af9d3b HEAD is a pointer to the last commit in the branch you're on. The other label can be another branch name or a number representing another commit. All you need to do is decide which version of the content you want to keep and then delete the merge conflict markers ( <<<<<<< , ======= , >>>>>>> ). After you've resolved all the changes in that way, just commit again. More trouble For more help and advice, check out Dangit, Git!?!","title":"Git basics"},{"location":"tools/tools-git-basics/#git-basics","text":"This page has the workflows and commands you'll use in the recipes, and some hints to get you out of trouble. Hint It might not be worth it to read through this page all the way through. Just refer to the parts you need. The recipes link to them.","title":"Git basics"},{"location":"tools/tools-git-basics/#branching-workflows","text":"There are many possible branching workflows, but only two in this guide: Git Centralized Workflow : all work is done in a single branch GitHub Flow : different pieces of work are done in different branches","title":"Branching workflows"},{"location":"tools/tools-git-basics/#centralized-git-workflow","text":"In the centralized Git workflow, everyone works on a single branch (usually called master ). Changes are committed to the local repository on each contributor's own computer. From time to time, each user pushes changes to a remote Git repository. Here are the operations a contributor performs when working in the centralized Git workflow. 1. Pull Fetch the latest changes from the remote repository to the local repository on your computer 2. Work Edit your content in your favorite Markdown editor 3. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git 4. Push When your work is final, push it up to the remote repository In the event that two people create conflicting changes, they can be manually resolved and then merged. Although this workflow is called \"centralized,\" it doesn't really resemble the old centralized source control model. The central remote repository is not a single source of truth, because every contributor has their own copy of the entire repository. The following recipes use the centralized Git workflow: Edit a Git wiki Collaborate using centralized Git workflow","title":"Centralized Git workflow"},{"location":"tools/tools-git-basics/#github-flow","text":"In the GitHub flow, you start a new branch based on master whenever you start a group of related tasks. How you organize those tasks, and how you decide which ones belong in a branch together, is up to you. Just like in the centralized workflow, you commit changes frequently to your own local repository. When you push to the remote repo, you create a copy of your branch there so that others can review your changes before they are merged back into master . Here's how your day looks in the GitHub flow. 1. Pull Make sure you're on the master branch and sync the latest changes from the remote repository. 2. Create a branch Create (\"check out\") a branch for working on the current part of the content. 3. Work Edit your content in your favorite Markdown editor. 4. Stage and commit From time to time, in your Git client, type a short sentence about what you've done and save the changes to Git. 5. Push From time to time, sync your branch up to the remote repository. 6. Create a pull request When your work is ready for review, create a pull request and add reviewers. If there's more work to do before final approval, you can edit your content, stage and commit, an push to the existing pull request. 7. Merge When your work is approved, merge your branch into master on the remote repository Merge conflicts in the same branch are less likely, because you are creating your own branches and other people don't necessarily work in your branch with you. Before you push your branch to the remote repo, you can pull from master again and merge any conflicts locally. Hint After you've pushed, approved, and merged your work, you can delete your working branch or keep it around for further work. When you start work on a different part of the project, remember to switch to master and pull again before creating a new branch. The following recipe uses the GitHub flow: Managing docs with GitHub flow","title":"GitHub flow"},{"location":"tools/tools-git-basics/#how-to-git","text":"These are the commands that make up the steps in the Git branching workflows.","title":"How to Git"},{"location":"tools/tools-git-basics/#pull","text":"The Git pull command fetches and downloads content from your remote repository, automatically merges the changes with your local repository, and updates everything so that your repository matches the latest version of everything on the remote. It's a good idea to pull after making sure you're on the right branch and before starting to work on the content. Sourcetree Make sure you're on the right branch in the correct repository: The bold text under Branches tells you the branch The tab at the top of the screen tells you the repository Select Repository > Pull or click the Pull button. GitHub Desktop In GitHub Desktop, you can fetch and pull separately. Fetch gets the latest updates from origin but doesn't update your local working copy with the changes. After you click Fetch origin , the button changes to Pull Origin . Make sure you're on the right branch in the correct repository: The bold text under Current branch tells you the branch The bold text under Current repository tells you the repository Select Repository > Pull or: Click the Fetch origin button. Click the Pull origin button. Linux command line Make sure you're on the right branch in the correct repository: $ git branch * master $ git remote -v origin https://github.com/pconrad-fb/markdown.git (fetch) origin https://github.com/pconrad-fb/markdown.git (push) Type the git pull command: $ git pull","title":"Pull"},{"location":"tools/tools-git-basics/#stage-and-commit","text":"Git knows when you make changes to your files. When you want to save those changes to Git, you must do two things: stage them, which tells Git which changes you intend to keep commit them, which saves the changes. Sourcetree In Sourcetree, you stage and commit your files in two operations. Make sure you're on the right branch in the correct repository. Look for the files you changed in the Unstaged files pane. Select the files you want to stage\u2014in most cases, you can just click Stage All. Make sure you see the right files in the Staged files pane. Type a short commit message and click Commit . GitHub Desktop In GitHub Desktop, you can stage and commit your files in one step. Make sure you're on the right branch in the correct repository. Look for the files you changed in the Changes tab. Unselect any files you don't want to change\u2014most of the time, you can leave all the checkboxes checked. Type a short commit message. Make sure the Commit button refers to the correct branch (\"Commit to master,\" for example). Click Commit to [branch] . Linux command line Make sure you're on the right branch in the correct repository. Use git status to see what changes are not yet staged. Stage any changes you plan to commit. In many cases, you can stage all the changes at once like this: $ git add * Commit the changes, adding a descriptive message: $ git commit -m \"Type your descriptive message here.\" Hint If you are changing files but not adding or deleting any files, you can often stage and commit all in one line with commit -am like so: $ git commit -am \"Type your descriptive message here.\"","title":"Stage and commit"},{"location":"tools/tools-git-basics/#push","text":"Sourcetree Make sure you're on the right branch in the correct repository. Select Repository > Push or click the Push button. GitHub Desktop Make sure you're on the right branch in the correct repository. Select Repository > Push or click the Push origin button. Linux command line Make sure you're on the right branch in the correct repository. Push, specifying the remote (usually origin ) and the branch. For the recipes where you are working on the master branch, the command looks like this: $ git push origin master Of course, since git knows what branch you're on and where your remote is, you can sometimes just type git push .","title":"Push"},{"location":"tools/tools-git-basics/#create-a-branch","text":"Sourcetree Pull from master. Click the Branch button: Type a descriptive name and click Create Branch . Look under Branches to see that you're on the new branch. You can switch to a different branch by clicking it in the list of branches. GitHub Desktop Pull from master. Click the Current branch tab and click New branch : Type a descriptive name and click Create branch : Click Publish branch : Look under Branches to see that you're on the new branch. You can switch to a different branch by clicking it in the list of branches. Linux command line Pull from master to make sure you have the latest changes: $ git checkout master Already on 'master' Your branch is up to date with 'origin/master'. $ git pull Already up to date. Create a new branch and switch to it with git checkout -b . Example: $ git checkout -b test-branch Switched to a new branch 'test-branch' You can switch to any existing branch by typing git checkout <branch-name> without the -b . Example: $ git checkout -b test-branch Switched to branch 'test-branch' Hint You can't switch branches with uncommitted changes. You have to commit before switching to a new branch.","title":"Create a branch"},{"location":"tools/tools-git-basics/#create-a-pull-request","text":"Bitbucket and Sourcetree Click Repository > Create pull request . In the dialog that appears, click Create Pull Request On Web : Type a description, add reviewers, and click Create pull request : GitHub and GitHub Desktop When you push, the banner with the Push button changes \"Create a pull request from your current branch.\" Click Create Pull Request : The browser opens a page with a form for creating a pull request: Click the gear next to Reviewers to add reviewers: Click Create pull request . Linux command line Take a look at the output from the push command: $ git push origin test-branch Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 4 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 4.39 KiB | 1.10 MiB/s, done. Total 10 (delta 2), reused 0 (delta 0) remote: Resolving deltas: 100% (2/2), completed with 1 local object. remote: remote: Create a pull request for 'test-branch' on GitHub by visiting: remote: https://github.com/pconrad-fb/markdown/pull/new/test-branch remote: To https://github.com/pconrad-fb/markdown.git * [new branch] test-branch -> test-branch Copy the URL from the line after Create a pull request into a browser. Follow the instructions on screen. If you get stuck, you can see some hints in the instructions for Bitbucket or GitHub.","title":"Create a pull request"},{"location":"tools/tools-git-basics/#approve-and-merge","text":"Merge your branch online in the web interface of your Git host. Bitbucket When your pull request is sufficiently approved, click Merge : GitHub When your pull request is sufficiently approved, click Merge :","title":"Approve and merge"},{"location":"tools/tools-git-basics/#getting-out-of-trouble","text":"If you get out into the woods with Git, there's usually a way to get back\u2014but for this kind of magic, you have to go to the command line.","title":"Getting out of trouble"},{"location":"tools/tools-git-basics/#working-in-the-wrong-branch","text":"So you've edited a file in the wrong branch. What you'd like to be able to do is undo those changes, switch branches, then re-do them. Actually, it would be even better to lift those changes off of the wrong branch, laying them gently on top of the branch you meant to be in. Fortunately, Git provides a command called stash that does exactly that. Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' 1. In the branch where you were erroneously working, stash your uncommitted changes: $ git stash Switch to the branch you wish you had been working in, and apply the changes there: $ git stash apply","title":"Working in the wrong branch"},{"location":"tools/tools-git-basics/#editing-the-wrong-file","text":"You opened a file to look at it, but then your cat walked across the keyboard. You're not sure what was added or deleted. You just want to go back to the way things were at the last commit. For this, use checkout . Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' Use git status to see what files were accidentally modified. For example: $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: dont-change-this.md Use git checkout to undo the changes. For example: git checkout -- dont-change-this.md","title":"Editing the wrong file"},{"location":"tools/tools-git-basics/#staged-too-soon","text":"You edited the right file the right way, but then you added it to the staging area too hastily. You don't want to undo your changes to the file, but you would like to remove it from the next commit. This is one of the uses of reset . You can also use reset to do more drastic rollbacks. You can undo entire commits if you want. Make sure you're in the right directory. Use git status to check what branch you're on and what changes Git knows about. If necessary, switch to the correct branch. For example: $ git checkout -b the-branch Switched to branch 'the-branch' Use git status to see what files were accidentally modified. For example: $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README modified: dont-commit-this.md Use git reset to remove the file from the next commit. For example: git reset HEAD dont-commit-this.md","title":"Staged too soon"},{"location":"tools/tools-git-basics/#merge-conflicts","text":"When Git is unable to automatically merge, it means that two changes happened in the same place in the same file. That means you need to edit the file and decide which of the two changes to keep. When you open the file, the merge conflict looks like this: <<<<<<< HEAD Some content that was changed by one person ======= Other content that someone else changed >>>>>>> 9af9d3b HEAD is a pointer to the last commit in the branch you're on. The other label can be another branch name or a number representing another commit. All you need to do is decide which version of the content you want to keep and then delete the merge conflict markers ( <<<<<<< , ======= , >>>>>>> ). After you've resolved all the changes in that way, just commit again.","title":"Merge conflicts"},{"location":"tools/tools-git-basics/#more-trouble","text":"For more help and advice, check out Dangit, Git!?!","title":"More trouble"},{"location":"tools/tools-git-setup/","text":"Git setup If you want to be ready for all the recipes in this guide, follow these steps to install Git and a Git client, sign up for a host, and set up your first repository. Install Git If you don't already have Git set up on your computer, follow these steps. Install Git on your computer: Windows macOS Linux Install a git client such as Sourcetree or GitHub Desktop . Hint You can use any Git client with any Git host, but some clients work especially well with specific hosts. For example: Sourcetree and Bitbucket GitHub Desktop and GitHub Set up a repository A repository is where you keep your work. You'll need a local repository where you edit and save files on your computer, and a remote repository online that lets people collaborate on the same project. A straightforward way to create both is to set up a repository with an online host and then clone it (create a local copy). Your collaborators can also clone the repository to their own computers, so everyone can keep in sync by pushing and pulling changes. Bitbucket and Sourcetree Sign up with Bitbucket and log on. Click the new repository button (the plus sign): Type a repository name, make sure it's set to be a public repository, and click Create repository . Choose or create a directory on your computer where you would like to keep your local copy of the project. Click Clone in Sourcetree . Choose a folder on your computer for the local copy of the repository and click Clone . GitHub and GitHub Desktop Sign up with GitHub and log on. Click the plus sign and select New repository : Type a repository name, make sure it's set to be a public repository, and click Create repository . Click Set up in Desktop to open the repository in GitHub Desktop: Choose a folder on your computer for the local copy of the repository and click Clone . It might not look like much has happened, but you now have: Git running on your computer A repository at an online Git host A local copy of the repository on your computer Next steps Take a look at Git basics Try setting up a Git wiki","title":"Git setup"},{"location":"tools/tools-git-setup/#git-setup","text":"If you want to be ready for all the recipes in this guide, follow these steps to install Git and a Git client, sign up for a host, and set up your first repository.","title":"Git setup"},{"location":"tools/tools-git-setup/#install-git","text":"If you don't already have Git set up on your computer, follow these steps. Install Git on your computer: Windows macOS Linux Install a git client such as Sourcetree or GitHub Desktop . Hint You can use any Git client with any Git host, but some clients work especially well with specific hosts. For example: Sourcetree and Bitbucket GitHub Desktop and GitHub","title":"Install Git"},{"location":"tools/tools-git-setup/#set-up-a-repository","text":"A repository is where you keep your work. You'll need a local repository where you edit and save files on your computer, and a remote repository online that lets people collaborate on the same project. A straightforward way to create both is to set up a repository with an online host and then clone it (create a local copy). Your collaborators can also clone the repository to their own computers, so everyone can keep in sync by pushing and pulling changes. Bitbucket and Sourcetree Sign up with Bitbucket and log on. Click the new repository button (the plus sign): Type a repository name, make sure it's set to be a public repository, and click Create repository . Choose or create a directory on your computer where you would like to keep your local copy of the project. Click Clone in Sourcetree . Choose a folder on your computer for the local copy of the repository and click Clone . GitHub and GitHub Desktop Sign up with GitHub and log on. Click the plus sign and select New repository : Type a repository name, make sure it's set to be a public repository, and click Create repository . Click Set up in Desktop to open the repository in GitHub Desktop: Choose a folder on your computer for the local copy of the repository and click Clone . It might not look like much has happened, but you now have: Git running on your computer A repository at an online Git host A local copy of the repository on your computer","title":"Set up a repository"},{"location":"tools/tools-git-setup/#next-steps","text":"Take a look at Git basics Try setting up a Git wiki","title":"Next steps"},{"location":"tools/tools-git/","text":"Source control with Git Any time you collaborate with others, source control is important. Although you could just share a folder in the cloud, eventually there will come a time when someone overwrites or deletes something important. That's where source control comes in. And by \"source control,\" I mean Git. Note If you're just using Markdown to take notes or create Word documents, PDFs, and slides, you might not need Git. But if you're collaborating with others, read on! With Git, you synchronize files on your computer with files on a remote repository\u2014usually an online Git host. You can work on the files, saving them to the directory you've chosen for your local git repository, pushing changes up to the remote repository and pulling down changes others have made. Why Git? Back in the day, there were all kinds of source control systems. The ones I remember were all pretty easy to use, but were all centralized\u2014meaning that only one person could edit any given file at any given time. Worse, it meant that there wass one central source of truth; if that were corrupted or lost, everything would be gone. Git solves these problems and doesn't have to be hard to use . Get Git You'll need a place to host a Git repository. You might start by signing up with one of the best known Git hosts: Bitbucket GitHub GitLab You can use Git on the command line, but it's even easier if you use a Git client. These two are probably the best known: GitHub Desktop Sourcetree Hint While any Git client should work with any Git host, it's not a bad idea to install to use the client and host that go together: Bitbucket and Sourcetree GitHub and GitHub Desktop This guide includes instructions for those two combinations. Git concepts There's a lot to know about Git. As a writer, you should be able to decide how much you want to learn. You might just want to learn exactly enough to do your writing and keep out of trouble. That's the goal here. If you want to learn more, check out The Git Book . There are a lot of Git terms that are confusing. A lot of things that used to be intuitive\u2014like the idea that we're working on files and we need to lock them so that someone else can't check them out from the central repository \u2014 have no currency in the Git world: There's no central repository. A central repository would represent both a bottleneck and a single point of failure, so why do it? No one checks out files because there's no central repository. We don't need to lock files because we don't have to worry about them being checked out . In fact, we don't care about files at all in Git. We only care about changes. What things mean in Git Let's say you have a directory of files you're working on. yes, Git doesn't care about files, but you do! Commit You open a file in an editor, make some changes, and save the file. Git will notice the changes you made to the file. If you meant to make those changes, you must commit them. This is like \"saving changes to Git.\" A commit is a group of changes. Stage Sometimes, before you commit changes, you tell Git explicitly which changes to track. This is called staging. Since changes go with files, sometimes people think of it as staging the files themselves\u2014but it's really the changes that Git wants to know about. Repository When you commit, you type a little note describing the changes so that people know what was done. When you have committed, your changes are stored in the repository, or repo for short. It's just like that old central repository, but it's just on your computer. Push If you want other people to be able to work on your files, then you need to put them in an online repository (such as Bitbucket, GitHub, or GitLab). This is not checking in since the changes are already committed to your local repository. This is called a push to a remote repository . Clone Once something is in an online repository, an authorized person can clone their own copy of the whole repository. Pull As you work on a repository you've cloned, you can pull the latest changes to stay up to date. Branch Git lets people work in separate work streams called branches so that they don't interfere with each other's work. A branch is just a series of commits (and a commit is a group of changes). You're always working in a branch, even if it's the only branch. When you have several branches to work in, Git remembers the state of everything in each branch so that when you switch between them everything is just how you expect it. Creating a new branch is called branching, of course. The Git command for creating (or switching to) a branch is called, confusingly, checkout. There are different branching strategies. Some are complicated; others are simple. The recipes in this guide use two branching strategies, described in Git basics . Merge If there's more than one branch, there always comes a time to merge, which means to add the changes from one branch into another. Why branching is cool Git keeps track of the whole history of all the changes on all the branches. Not only does that mean you can roll back to any point in time, it also means that when you switch branches all your files magically change to match whatever changes you've made in that branch. For example, I created a branch called test-branch based on the master branch. Working in test-branch , I added a file called new-file.md which you can see in the directory: $ ls getting-started img index.md new-file.md When I switch to master , it's not there: $ git checkout master Switched to branch 'master' Your branch is up to date with 'origin/master'. $ ls getting-started img index.md When I switch back to test-branch , it's there: $ git checkout test-branch Switched to branch 'test-branch' $ ls getting-started img index.md new-file.md Branching is cool. Next steps Set up Git","title":"About Git"},{"location":"tools/tools-git/#source-control-with-git","text":"Any time you collaborate with others, source control is important. Although you could just share a folder in the cloud, eventually there will come a time when someone overwrites or deletes something important. That's where source control comes in. And by \"source control,\" I mean Git. Note If you're just using Markdown to take notes or create Word documents, PDFs, and slides, you might not need Git. But if you're collaborating with others, read on! With Git, you synchronize files on your computer with files on a remote repository\u2014usually an online Git host. You can work on the files, saving them to the directory you've chosen for your local git repository, pushing changes up to the remote repository and pulling down changes others have made.","title":"Source control with Git"},{"location":"tools/tools-git/#why-git","text":"Back in the day, there were all kinds of source control systems. The ones I remember were all pretty easy to use, but were all centralized\u2014meaning that only one person could edit any given file at any given time. Worse, it meant that there wass one central source of truth; if that were corrupted or lost, everything would be gone. Git solves these problems and doesn't have to be hard to use .","title":"Why Git?"},{"location":"tools/tools-git/#get-git","text":"You'll need a place to host a Git repository. You might start by signing up with one of the best known Git hosts: Bitbucket GitHub GitLab You can use Git on the command line, but it's even easier if you use a Git client. These two are probably the best known: GitHub Desktop Sourcetree Hint While any Git client should work with any Git host, it's not a bad idea to install to use the client and host that go together: Bitbucket and Sourcetree GitHub and GitHub Desktop This guide includes instructions for those two combinations.","title":"Get Git"},{"location":"tools/tools-git/#git-concepts","text":"There's a lot to know about Git. As a writer, you should be able to decide how much you want to learn. You might just want to learn exactly enough to do your writing and keep out of trouble. That's the goal here. If you want to learn more, check out The Git Book . There are a lot of Git terms that are confusing. A lot of things that used to be intuitive\u2014like the idea that we're working on files and we need to lock them so that someone else can't check them out from the central repository \u2014 have no currency in the Git world: There's no central repository. A central repository would represent both a bottleneck and a single point of failure, so why do it? No one checks out files because there's no central repository. We don't need to lock files because we don't have to worry about them being checked out . In fact, we don't care about files at all in Git. We only care about changes.","title":"Git concepts"},{"location":"tools/tools-git/#what-things-mean-in-git","text":"Let's say you have a directory of files you're working on. yes, Git doesn't care about files, but you do! Commit You open a file in an editor, make some changes, and save the file. Git will notice the changes you made to the file. If you meant to make those changes, you must commit them. This is like \"saving changes to Git.\" A commit is a group of changes. Stage Sometimes, before you commit changes, you tell Git explicitly which changes to track. This is called staging. Since changes go with files, sometimes people think of it as staging the files themselves\u2014but it's really the changes that Git wants to know about. Repository When you commit, you type a little note describing the changes so that people know what was done. When you have committed, your changes are stored in the repository, or repo for short. It's just like that old central repository, but it's just on your computer. Push If you want other people to be able to work on your files, then you need to put them in an online repository (such as Bitbucket, GitHub, or GitLab). This is not checking in since the changes are already committed to your local repository. This is called a push to a remote repository . Clone Once something is in an online repository, an authorized person can clone their own copy of the whole repository. Pull As you work on a repository you've cloned, you can pull the latest changes to stay up to date. Branch Git lets people work in separate work streams called branches so that they don't interfere with each other's work. A branch is just a series of commits (and a commit is a group of changes). You're always working in a branch, even if it's the only branch. When you have several branches to work in, Git remembers the state of everything in each branch so that when you switch between them everything is just how you expect it. Creating a new branch is called branching, of course. The Git command for creating (or switching to) a branch is called, confusingly, checkout. There are different branching strategies. Some are complicated; others are simple. The recipes in this guide use two branching strategies, described in Git basics . Merge If there's more than one branch, there always comes a time to merge, which means to add the changes from one branch into another.","title":"What things mean in Git"},{"location":"tools/tools-git/#why-branching-is-cool","text":"Git keeps track of the whole history of all the changes on all the branches. Not only does that mean you can roll back to any point in time, it also means that when you switch branches all your files magically change to match whatever changes you've made in that branch. For example, I created a branch called test-branch based on the master branch. Working in test-branch , I added a file called new-file.md which you can see in the directory: $ ls getting-started img index.md new-file.md When I switch to master , it's not there: $ git checkout master Switched to branch 'master' Your branch is up to date with 'origin/master'. $ ls getting-started img index.md When I switch back to test-branch , it's there: $ git checkout test-branch Switched to branch 'test-branch' $ ls getting-started img index.md new-file.md Branching is cool.","title":"Why branching is cool"},{"location":"tools/tools-git/#next-steps","text":"Set up Git","title":"Next steps"},{"location":"tools/tools-publishing/","text":"Publishing tools There are many tools that can take your Markdown to your audience or just convert them for use in other doc tools. We'll focus the Git wiki, the static site generators Hugo and MkDocs, and Pandoc. We'll also touch on tools for creating standalone presentations. Git wiki A Git wiki is a special additional repository attached to your Git code repository. You create and clone a git wiki separately from your main repository. Git wiki structure A Git wiki uses folders to organize files. The path to a file is used to create the URL where the content is displayed. A simple directory structure might look like this: Home.md stuff/ something.md In that case, the URL to the content in something.md is: /wiki/stuff/something See also: Edit a Git wiki Hugo Hugo is an open-source static site generator that includes templates and provides exensibility in the form of shortcodes, which provide additional formatting. You can even create your own shortcodes. See also: Publish a website with Hugo MkDocs MkDocs is a static site generator that turns directories of Markdown files into a searchable, presentable website. Customizable themes, many of them provided by the community, provide Markdown extensions for reusing content and for formatting such as tabs and admonitions. See also: Publish documentation with MkDocs Pandoc Pandoc is a tool that can convert between Markdown and a number of formats. You can use Pandoc to create Word and Powerpoint documents, PDFs, HTML, and standalone slide presentations that work with tools like DZslides. For longer documents, Pandoc has options for concatenating Markdown files together. Pandoc includes formatting tricks that let you do things like create columns or scale images, and can use stylesheets from existing documents to give your content a specific look and feel. You can also convert from various formats to Markdown, including dong things like grabbing a web page as a Markdown file. You can even try it online . See also: Create a Word document Create an eBook Create a PDF Grab a web page Create a Powerpoint presentation Create a DZSlides presentation FTP When you create a website with Hugo or MkDocs, you'll use FTP to upload the files to the web. You can do this from the command line, but it's much easier to choose an application that gives a nice UI and lets you save bookmarks. Here are a few: FileZilla - a free, open source FTP tool for macOS and Windows gFTP - the default Linux option Transmit - a commercial app for macOS Presentation tools Here are two tools that you can use for in-browser presentations. DZSlides DZSlides is a single page, HTML-based slide presentation template. Pandoc can generate a DZSlides presentation from a Markdown file. See also: Create a DZSlides presentation Remark Remark is an in-browser presentation tool made from Javascript, HTML, CSS, and, of course, Markdown. The slideshow lives in a <textarea> tag where you can add and edit Markdown directly. See also: Create a Remark presentation","title":"Publishing"},{"location":"tools/tools-publishing/#publishing-tools","text":"There are many tools that can take your Markdown to your audience or just convert them for use in other doc tools. We'll focus the Git wiki, the static site generators Hugo and MkDocs, and Pandoc. We'll also touch on tools for creating standalone presentations.","title":"Publishing tools"},{"location":"tools/tools-publishing/#git-wiki","text":"A Git wiki is a special additional repository attached to your Git code repository. You create and clone a git wiki separately from your main repository.","title":"Git wiki"},{"location":"tools/tools-publishing/#git-wiki-structure","text":"A Git wiki uses folders to organize files. The path to a file is used to create the URL where the content is displayed. A simple directory structure might look like this: Home.md stuff/ something.md In that case, the URL to the content in something.md is: /wiki/stuff/something See also: Edit a Git wiki","title":"Git wiki structure"},{"location":"tools/tools-publishing/#hugo","text":"Hugo is an open-source static site generator that includes templates and provides exensibility in the form of shortcodes, which provide additional formatting. You can even create your own shortcodes. See also: Publish a website with Hugo","title":"Hugo"},{"location":"tools/tools-publishing/#mkdocs","text":"MkDocs is a static site generator that turns directories of Markdown files into a searchable, presentable website. Customizable themes, many of them provided by the community, provide Markdown extensions for reusing content and for formatting such as tabs and admonitions. See also: Publish documentation with MkDocs","title":"MkDocs"},{"location":"tools/tools-publishing/#pandoc","text":"Pandoc is a tool that can convert between Markdown and a number of formats. You can use Pandoc to create Word and Powerpoint documents, PDFs, HTML, and standalone slide presentations that work with tools like DZslides. For longer documents, Pandoc has options for concatenating Markdown files together. Pandoc includes formatting tricks that let you do things like create columns or scale images, and can use stylesheets from existing documents to give your content a specific look and feel. You can also convert from various formats to Markdown, including dong things like grabbing a web page as a Markdown file. You can even try it online . See also: Create a Word document Create an eBook Create a PDF Grab a web page Create a Powerpoint presentation Create a DZSlides presentation","title":"Pandoc"},{"location":"tools/tools-publishing/#ftp","text":"When you create a website with Hugo or MkDocs, you'll use FTP to upload the files to the web. You can do this from the command line, but it's much easier to choose an application that gives a nice UI and lets you save bookmarks. Here are a few: FileZilla - a free, open source FTP tool for macOS and Windows gFTP - the default Linux option Transmit - a commercial app for macOS","title":"FTP"},{"location":"tools/tools-publishing/#presentation-tools","text":"Here are two tools that you can use for in-browser presentations.","title":"Presentation tools"},{"location":"tools/tools-publishing/#dzslides","text":"DZSlides is a single page, HTML-based slide presentation template. Pandoc can generate a DZSlides presentation from a Markdown file. See also: Create a DZSlides presentation","title":"DZSlides"},{"location":"tools/tools-publishing/#remark","text":"Remark is an in-browser presentation tool made from Javascript, HTML, CSS, and, of course, Markdown. The slideshow lives in a <textarea> tag where you can add and edit Markdown directly. See also: Create a Remark presentation","title":"Remark"},{"location":"tools/tools-storage/","text":"Storage The simplest place to store Markdown is on your own computer, of course. You can merrily save files to a folder deep in My Documents and go on your way, perhaps emailing someone a Pandoc-generated PDF from time to time. But if you want to enjoy the true power of collaborating and publishing with Markdown, you'll want to share the files you're working on or publish them in another form. Hint Some Markdown tools, especially browser-based editors, sync directly with cloud storage and blogging sites. A shared server If you are collaborating on documents or contributing to documentation at work, you might need access to a shared server such as SharePoint or Samba, WebDAV, or online tools such as a Google Drive account. You can store your source files there or upload HTML, Word, PDF, and other documents you create from your Markdown. Cloud storage Cloud storage services like Box , DropBox , and OneDrive are a great place to keep documents you want available from everywhere. You can save Markdown files from one computer and have them available on other devices, even sharing them with colleagues. Cloud storage is great for Taking notes , because it lets you add to your notes from anywhere. Web hosting If you're creating online documentation or a website, you'll need a place to host it. Web hosting is far too big a subject to cover here, but you might need to investigate whether you need any of the following: A blog service such as Wordpress , Blogger , or Medium where you can publish writing directly A web host, to present your HTML files as web pages FTP software to upload HTML to a web host Another integrated online publishing service or platform","title":"Storage"},{"location":"tools/tools-storage/#storage","text":"The simplest place to store Markdown is on your own computer, of course. You can merrily save files to a folder deep in My Documents and go on your way, perhaps emailing someone a Pandoc-generated PDF from time to time. But if you want to enjoy the true power of collaborating and publishing with Markdown, you'll want to share the files you're working on or publish them in another form. Hint Some Markdown tools, especially browser-based editors, sync directly with cloud storage and blogging sites.","title":"Storage"},{"location":"tools/tools-storage/#a-shared-server","text":"If you are collaborating on documents or contributing to documentation at work, you might need access to a shared server such as SharePoint or Samba, WebDAV, or online tools such as a Google Drive account. You can store your source files there or upload HTML, Word, PDF, and other documents you create from your Markdown.","title":"A shared server"},{"location":"tools/tools-storage/#cloud-storage","text":"Cloud storage services like Box , DropBox , and OneDrive are a great place to keep documents you want available from everywhere. You can save Markdown files from one computer and have them available on other devices, even sharing them with colleagues. Cloud storage is great for Taking notes , because it lets you add to your notes from anywhere.","title":"Cloud storage"},{"location":"tools/tools-storage/#web-hosting","text":"If you're creating online documentation or a website, you'll need a place to host it. Web hosting is far too big a subject to cover here, but you might need to investigate whether you need any of the following: A blog service such as Wordpress , Blogger , or Medium where you can publish writing directly A web host, to present your HTML files as web pages FTP software to upload HTML to a web host Another integrated online publishing service or platform","title":"Web hosting"}]}